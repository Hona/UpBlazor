@using MudBlazor
@using Color = MudBlazor.Color

@inject RecurringExpensesClient RecurringExpensesClient
@inject UpClient UpClient

<MudText Typo="Typo.h4">
    Recurring Expenses
</MudText>


<MudDataGrid Items="_recurringExpenses" Loading="_loading">
    <Columns>
        <MudBlazor.Column T="RecurringExpense" Field="@nameof(RecurringExpense.Name)" CellClass="mud-typography-body1" />
        <MudBlazor.Column T="RecurringExpense" Title="Amount">
            <CellTemplate>
                <ExactOrRelativeMoneyDisplay Item="context.Item.Money"/>
            </CellTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="RecurringExpense" Field="@nameof(RecurringExpense.StartDate)" Title="Start">
            <CellTemplate>
                <DateDisplay Date="context.Item.StartDate" />
            </CellTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="RecurringExpense" Title="From">
            <CellTemplate>
                <SaverIdColumn SaverId="@context.Item.SaverId" Accounts="_accounts"/>
            </CellTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="RecurringExpense" Title="Every">
            <CellTemplate>
                <IntervalDisplay Interval="context.Item.Interval" IntervalUnits="context.Item.IntervalUnits"/>
            </CellTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="RecurringExpense">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Rounded.Delete" Color="Color.Tertiary" OnClick="async () => await DeleteAsync(context.Item)"/>
            </CellTemplate>
        </MudBlazor.Column>
    </Columns>
    <NoRecordsContent>
        <MudText Typo="Typo.body1">
            No recurring expenses
        </MudText>
    </NoRecordsContent>
</MudDataGrid>

@code
{
    private bool _loading;

    private IReadOnlyList<RecurringExpense>? _recurringExpenses;
    private IReadOnlyList<AccountResource>? _accounts;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    internal async Task ReloadAsync(bool forceReload = false)
    {
        _loading = true;
        
        if (forceReload)
        {
            StateHasChanged();
        }

        _recurringExpenses = await RecurringExpensesClient.GetRecurringExpensesAsync();
        _accounts = await UpClient.GetAccountsAsync();
        
        _loading = false;
        
        if (forceReload)
        {
            StateHasChanged();
        }
    }
    
    private async Task DeleteAsync(RecurringExpense expense)
    {
        _loading = true;

        await RecurringExpensesClient.DeleteRecurringExpenseAsync(expense.Id);

        _loading = false;

        await ReloadAsync();
    }
}
