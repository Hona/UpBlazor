@page "/admin/notifications"
@using OneOf.Types

@layout AdminAuthorizeLayout

@inject NotificationsClient NotificationsClient

<Title Level="3">Notifications</Title>

@if (_loading)
{
    <Spin />
}
else
{
    <Card>
        <Statistic Value="@_allNotifications.Count" 
                   Title="Total Notifications"/>
    </Card>

    <Divider/>

    <Card>
        <CreateNotificationButton OnNotificationCreated="HandleNotificationCreatedAsync"/>
    </Card>

    <Divider/>

    <Table DataSource="_allNotifications">
        <Column @bind-Field="@context.Title"/>
        <Column @bind-Field="@context.Description"/>
        <Column @bind-Field="@context.Author"/>
        <Column Title="Created At" 
                @bind-Field="@context.CreatedAt" 
                Format="dd/MM/yyyy hh:mm tt" 
                Sortable/>
        <ActionColumn>
            <Button OnClick="async () => await ShowReadByModal(context)">
                Read Receipts
            </Button>
            <Button Danger
                    OnClick="async () => await HandleNotificationDeletedAsync(context)">
                Delete
            </Button>
        </ActionColumn>
    </Table>
}

@if (_selectedNotification is not null)
{
    <Modal Visible="_modalVisible" Title="Notification Read Receipts" OnCancel="OnModalClose">
        @if (_modalLoading)
        {
            <Spin />
        }
        else
        {
            <Space Wrap>
                @foreach (var user in _selectedNotificationUsersWhoRead)
                {
                    <SpaceItem>
                        <Tag>@(user.GivenName) (@(user.Email))</Tag>
                    </SpaceItem>
                }
            </Space>
        }
    </Modal>
}


@code
{
    private bool _loading;
    private IReadOnlyList<ApiClient.Notification> _allNotifications;

    private bool _modalVisible;
    private bool _modalLoading = true;
    private ApiClient.Notification _selectedNotification;
    private IReadOnlyList<RegisteredUser> _selectedNotificationUsersWhoRead;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    private async Task ReloadAsync()
    {
        _loading = true;

        _allNotifications = await NotificationsClient.GetAllNotificationsAdminAsync();

        _loading = false;
    }

    private async Task HandleNotificationCreatedAsync() => await ReloadAsync();

    private async Task HandleNotificationDeletedAsync(ApiClient.Notification notification)
    {
        await NotificationsClient.DeleteNotificationAsync(notification.Id);

        await ReloadAsync();
    }

    private async Task ShowReadByModal(ApiClient.Notification notification)
    {
        _selectedNotification = notification;
        _modalVisible = true;
        
        _modalLoading = true;

        _selectedNotificationUsersWhoRead = await NotificationsClient.GetAllWhoReadNotificationAsync(_selectedNotification.Id);
        
        _modalLoading = false;
    }

    private void OnModalClose()
    {
        _modalVisible = false;
        _selectedNotification = null;
        _selectedNotificationUsersWhoRead = null;
    }
}
