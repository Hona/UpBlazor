@using MudBlazor

@inject UpClient _upClient

@if (_loading)
{
    <MudProgressCircular Indeterminate />
}
else
{
    ArgumentNullException.ThrowIfNull(_accounts);
    
    <MudSelect Value="SelectedSaver" ValueChanged="SelectedSaverChanged" Required="Required"
               Placeholder="Select a saver" Label="Saver">
        @foreach (var account in _accounts)
        {
            <MudSelectItem Value="account">
                @account.Attributes.DisplayName
            </MudSelectItem>
        }
    </MudSelect>
}

@code
{
    [Parameter]
    public bool Required { get; set; }
    
    [Parameter]
    public EventCallback<AccountResource?> SelectedSaverChanged { get; set; }

    [Parameter]
    public AccountResource? SelectedSaver { get; set; }
    
    [Parameter]
    public string? InitialSaverId { get; set; }
    

    private IReadOnlyList<AccountResource>? _accounts;

    private bool _loading;
    
    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        _accounts = await _upClient.GetAccountsAsync();

        if (InitialSaverId is not null)
        {
            var account = _accounts.FirstOrDefault(x => x.Id == InitialSaverId);

            if (SelectedSaver != account)
            {
                await SelectedSaverChanged.InvokeAsync(account);
            }
        }

        _loading = false;
    }
}
