@using UpBlazor.Application.Features.Up
@using UpBlazor.Application.Exceptions
@inject IMediator _mediator
@inject ICurrentUserService _currentUserService

<div style="display: flex; justify-content: center; align-items: center; width: 100%">
    @if (_loading)
    {
        <Spin />
    }
    else
    {
        <AuthorizeView>
            <Authorized>
                @if (_response is { Success: false })
                {
                    <span>❌</span>
                }
                else if (_response is null)
                {
                    /* No access token set - this is handled by the error boundary; should throw an exception */
                }
                else
                {
                    <span>@_response.Response.Meta.StatusEmoji</span>
                }
            </Authorized>
            <NotAuthorized />
        </AuthorizeView>
    }
    
</div>

@code
{
    private bool _loading;
    private UpResponse<PingResponse> _response;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        try
        {
            var upApi = await _currentUserService.GetApiAsync();
        }
        catch (UpApiAccessTokenNotSetException)
        {
            _loading = false;
            return;
        }
        
        _response = await _mediator.Send(new GetUpPingQuery());
        
        _loading = false;
    }
}
