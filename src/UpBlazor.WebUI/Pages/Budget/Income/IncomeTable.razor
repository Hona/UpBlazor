@using MudBlazor
@using Color = MudBlazor.Color

@inject IncomesClient IncomesClient

@if (_loading)
{
    <MudProgressCircular Indeterminate />
}
else
{
    <MudText Typo="Typo.h4">Income</MudText>
    
    <MudDataGrid Items="_incomes">
        <Columns>
            <MudBlazor.Column T="Income" Field="@nameof(Income.Name)" />
            <MudBlazor.Column T="Income" Field="@nameof(Income.ExactMoney)" Title="Amount">
                <CellTemplate>
                    $@context.Item.ExactMoney.ToString("F2")
                </CellTemplate>
            </MudBlazor.Column>
            <MudBlazor.Column T="Income" Field="@nameof(Income.StartDate)" Title="Start Date">
                <CellTemplate>
                    @context.Item.StartDate.ToString("dd MMMM yyyy")
                </CellTemplate>
            </MudBlazor.Column>
            <MudBlazor.Column T="Income" Title="Paid Every">
                <CellTemplate>
                    @context.Item.IntervalUnits @context.Item.Interval
                </CellTemplate>
            </MudBlazor.Column>
            <MudBlazor.Column T="Income">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Rounded.Delete" Color="Color.Tertiary" OnClick="async () => await DeleteAsync(context.Item)"/>
                </CellTemplate>
            </MudBlazor.Column>
        </Columns>
    </MudDataGrid>
}

@code
{
    private Guid _editId = Guid.Empty;
    
    private bool _loading;

    private IReadOnlyList<Income> _incomes;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    internal async Task ReloadAsync(bool forceReload = false)
    {
        _loading = true;
        
        if (forceReload)
        {
            StateHasChanged();
        }

        _incomes = await IncomesClient.GetIncomesAsync();
        
        _loading = false;
        
        if (forceReload)
        {
            StateHasChanged();
        }
    }

    private async Task DeleteAsync(Income income)
    {
        _loading = true;

        await IncomesClient.DeleteIncomeAsync(income.Id);
        
        _loading = false;

        await ReloadAsync();
    }

    private async Task SaveAsync(Income income)
    {
        _loading = true;

        await IncomesClient.UpdateIncomeAsync(income.Id, income);

        _loading = false;
        
        _editId = Guid.Empty;

        await ReloadAsync();
    }
}