@using Microsoft.AspNetCore.Components
@inject IGoalRepository _goalRepository

<RepositoryWrapper @ref="_repoRef"
                   TRepository="IGoalRepository"
                   Action="x => x.GetAllByUserIdAsync(UserId)"
                   TResponse="IReadOnlyList<Goal>"
                   Context="goals"
                   ChildHandlesLoading="true">
    <Title Level="3">Goals</Title>
    <Table DataSource="goals" Loading="LoadingAggregate" Context="tableContext">
        <Column Title="Name" @bind-Field="@tableContext.Name" Sortable/>
        <Column Title="Amount"  @bind-Field="@tableContext.Amount" Format="$0" Sortable/>
        <Column Title="Date" @bind-Field="@tableContext.Date" Format="dd/MM/yyyy" Sortable/>
        <Column Title="Saver" @bind-Field="@tableContext.SaverId">
            @{
                var saver = Accounts.Data.FirstOrDefault(x => x.Id == tableContext.SaverId);
            }
            <span>@(saver?.Attributes.DisplayName ?? "N/A") ($@(saver?.Attributes.Balance.Value ?? "N/A"))</span>
        </Column>
        <ActionColumn>
            <Space>
                <SpaceItem>
                    <Button Danger OnClick="async () => await DeleteAsync(tableContext)">Remove</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</RepositoryWrapper>

@code
{
    [CascadingParameter(Name = CascadingConstants.UserIdWrapper)]
    public string UserId { get; set; }
    
    [CascadingParameter(Name = CascadingConstants.UpApiWrapper)]
    public PaginatedDataResponse<AccountResource> Accounts { get; set; }

    public RepositoryWrapper<IGoalRepository, IReadOnlyList<Goal>> RepositoryWrapper => _repoRef;
    
    private bool _loading;

    private bool LoadingAggregate => _loading ? _loading : _repoRef.Loading;
    
    private RepositoryWrapper<IGoalRepository, IReadOnlyList<Goal>> _repoRef;
    
    private async Task DeleteAsync(Goal income)
    {
        _loading = true;

        await _goalRepository.DeleteAsync(income);
        
        _loading = false;

        await _repoRef.ReloadAsync();
    }
}