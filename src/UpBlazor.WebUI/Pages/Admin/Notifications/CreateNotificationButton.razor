@using Color = MudBlazor.Color
@inject NotificationsClient NotificationsClient

<MudText Typo="Typo.h5">
    Create Notification
</MudText>

@if (_formLoading)
{
    <MudProgressCircular Indeterminate />
}
else
{
    <EditForm Model="_createNotification" OnValidSubmit="HandleOk" OnInvalidSubmit="HandleCancel">
        <MudTextField @bind-Value="_createNotification.Title" Label="Title" />
        <MudTextField @bind-Value="_createNotification.Description" Label="Description" Lines="5"/>
        <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">
            Create
        </MudButton>
    </EditForm>
}

@code 
{
    private bool _formLoading;
    private CreateNotification _createNotification = new();
    
    [Parameter]
    public EventCallback OnNotificationCreated { get; set; }

    private async Task HandleOk()
    {
        _formLoading = true;

        await NotificationsClient.CreateNotificationAsync(new CreateNotificationCommand
        {
            Title = _createNotification.Title,
            Description = _createNotification.Description
        });
        
        _formLoading = false;
        
        if (OnNotificationCreated.HasDelegate)
        {
            await OnNotificationCreated.InvokeAsync();
        }

        _createNotification = new CreateNotification();
    }
    
    private void HandleCancel()
    {
        _createNotification = new CreateNotification();
        _formLoading = false;
    }

    private class CreateNotification
    {
        public string? Title { get; set; }
        public string? Description { get; set; }
    }
}