@inject ICurrentUserService _currentUserService

@typeparam T

@namespace UpBlazor.Web.Shared.Components

@if (CascadedResponse != null)
{
    <CascadingValue Name="@CascadingConstants.UpApiWrapper" Value="CascadedResponse">
        @ChildContent(CascadedResponse)
    </CascadingValue>
}
else
{

    if (_loading && !ChildHandlesLoading)
    {
        <Spin/>
    }
    else if (_upApi == null)
    {
        if (!HideOnNoAccessToken)
        {
            <Result Status="error" Title="No Access Token" SubTitle="You have not set your Up API access token, please add it in the settings">
                <Extra>
                    <Button Type="primary"><a href="/settings/up-access-token" style="color: #fff">Settings</a></Button>
                </Extra>
            </Result>
        }
    }
    else if (_response != null && !_response.Success)
    {
        <Result Status="error" Title="API Error"></Result>
    }
    else if (ChildContent != null)
    {
        <CascadingValue Name="@CascadingConstants.UpApiWrapper" Value="_response?.Response">
            @ChildContent(_response?.Response)
        </CascadingValue>
    }
}

@code 
{
    [Parameter]
    public RenderFragment<T> ChildContent { get; set; }

    [Parameter]
    public Func<IUpApi, Task<UpResponse<T>>> Action { get; set; }

    [Parameter]
    public bool HideOnNoAccessToken { get; set; }

    [Parameter]
    public bool ChildHandlesLoading { get; set; }
    
    [CascadingParameter(Name = CascadingConstants.UpApiWrapper)]
    public T CascadedResponse { get; set; }
    
    public bool Loading => _loading;

    private IUpApi _upApi;

    private bool _loading;

    private UpResponse<T> _response;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        _upApi = await _currentUserService.GetApiAsync();
        
        if (_upApi == null)
        {
            _loading = false;
            return;
        }

        _response = await Action.Invoke(_upApi);
        CascadedResponse = default;

        _loading = false;
    }
}