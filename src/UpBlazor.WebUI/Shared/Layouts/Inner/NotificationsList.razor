@using Notification = UpBlazor.ApiClient.Notification
@inject NotificationsClient NotificationsClient

@using MudBlazor
@using Color = MudBlazor.Color

@if (_notifications is null)
{
    <MudProgressCircular Size="Size.Small" Indeterminate />
}
else if (!_notifications.Any())
{
    <MudText Class="mud-text-secondary my-12">Nothing new</MudText>
}
else
{
    <MudList Style="max-width: 600px">
        @foreach (var notification in _notifications.OrderByDescending(x => x.CreatedAt))
        {
            <MudListItem>
                <MudStack Row Style="height: fit-content" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <div style="width: 100%">
                        <MudStack Row Justify="Justify.SpaceBetween">
                            <MudText Class="mud-text-primary">@notification.Title</MudText>
                            <MudText Typo="Typo.overline">@notification.CreatedAt.ToString("D")</MudText>
                        </MudStack>
                        <MudText Class="mud-text-secondary">@notification.Description</MudText>
                    </div>
                    
                    <div @onclick="@() => {}" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                        <MudIconButton Icon="@Icons.Rounded.Done" Color="Color.Success" Variant="Variant.Text" 
                                       OnClick="@(async () => await NotificationsClient.ReadNotificationAsync(notification.Id))"/>
                    </div>
                </MudStack>
            </MudListItem>
        }
    </MudList>
}


@code
{
    private IReadOnlyList<Notification>? _notifications;

    protected override async Task OnInitializedAsync()
    {
        _notifications = await NotificationsClient.GetAllNotificationsAsync(false);
    }
}
