@page "/insights/transactions/{AccountId?}"

@using Color = MudBlazor.Color

@inject IJSRuntime JS
@inject UpClient UpClient

@if (_loading && _transactions == null)
{
    <MudProgressLinear Indeterminate />
}
else
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
        @foreach (var account in _accounts)
        {
            <MudTabPanel Text="@account.Attributes.DisplayName">
                @{
                    var transactions = _transactions.Data
                        .Where(x => x.Relationships.Account.Data.Id == account.Id)
                        .ToList();
                }
                <MudDataGrid Outlined Loading="_loading" Items="transactions" Elevation="0" RowsPerPage="15">
                    <Columns>
                        <MudBlazor.Column T="TransactionResource" SortBy="x => x.Attributes.CreatedAt" Title="Created At">
                            <CellTemplate>
                                @context.Item.Attributes.CreatedAt.ToString("f")
                            </CellTemplate>
                        </MudBlazor.Column>
                        <MudBlazor.Column T="TransactionResource" SortBy="x => x.Attributes.Description" Title="Description">
                            <CellTemplate>
                                @context.Item.Attributes.Description
                            </CellTemplate>
                        </MudBlazor.Column>
                        <MudBlazor.Column T="TransactionResource" SortBy="x => x.Attributes.Message" Title="Message">
                            <CellTemplate>
                                @context.Item.Attributes.Message
                            </CellTemplate>
                        </MudBlazor.Column>
                        <MudBlazor.Column T="TransactionResource" SortBy="x => x.Attributes.Amount.ValueInBaseUnits" Title="Amount">
                            <CellTemplate>
                                @if (context.Item.Attributes.Amount.ValueInBaseUnits < 0)
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Error">
                                        $@context.Item.Attributes.Amount.Value[1..]
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Success">
                                        $@context.Item.Attributes.Amount.Value
                                    </MudText>
                                }
                            </CellTemplate>
                        </MudBlazor.Column>
                    </Columns>
                    <PagerContent>
                        <MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                            <MudDataGridPager T="TransactionResource"/>
                            <MudButton Style="height: min-content" OnClick="LoadMoreAsync">Load More</MudButton>
                        </MudStack>
                    </PagerContent>
                </MudDataGrid>
            </MudTabPanel>
        }
    </MudTabs>
}

@code
{
    private bool _loading;
    
    private UpPaginatedViewModelOfTransactionResource _transactions;
    private IReadOnlyList<AccountResource> _accounts;

    [Parameter]
    public string AccountId { get; set; }

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    private async Task ReloadAsync()
    {
        _loading = true;

        if (string.IsNullOrWhiteSpace(AccountId))
        {
            _transactions = await UpClient.GetAllTransactionsAsync();
        }
        else
        {
            _transactions = await UpClient.GetTransactionsAsync(AccountId);
        }

        _accounts = await UpClient.GetAccountsAsync();

        // View only one account
        if (!string.IsNullOrWhiteSpace(AccountId))
        {
            _accounts = _accounts.Where(x => x.Id == AccountId).ToList();
        }

        _loading = false;
    }

    private async Task LoadMoreAsync()
    {
        _loading = true;

        await JS.InvokeVoidAsync("scrollToTop");
        
        var oldTransactions = _transactions.Data;
        _transactions = await UpClient.GetTransactionsPaginationLinkAsync(_transactions.Links.Next);
        _transactions.Data = oldTransactions.Concat(_transactions.Data).ToList();
        
        _loading = false;
    }
}
