@using MudBlazor

@inject IncomesClient IncomesClient

@if (_loading)
{
    <MudProgressCircular Indeterminate />
}
else
{
    ArgumentNullException.ThrowIfNull(_incomes);
    
    <MudSelect Value="SelectedIncome" ValueChanged="SelectedIncomeChanged" Required="Required"
               Placeholder="Select an income" Label="Income">
        @foreach (var income in _incomes)
        {
            <MudSelectItem Value="income" >
                @income.Name
            </MudSelectItem>
        }
    </MudSelect>
}

@code
{
    [Parameter]
    public bool Required { get; set; }
    
    [Parameter]
    public Income? SelectedIncome { get; set; }

    [Parameter]
    public EventCallback<Income?> SelectedIncomeChanged { get; set; }

    [Parameter]
    public bool SelectFirst { get; set; } = true;
    
    private IReadOnlyList<Income>? _incomes;

    private bool _loading;
    
    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        _incomes ??= await IncomesClient.GetIncomesAsync();
        
        if (SelectFirst)
        {
            var selectedIncome = _incomes.FirstOrDefault();

            if (selectedIncome != SelectedIncome)
            {
                await SelectedIncomeChanged.InvokeAsync(selectedIncome);
            }
        }
        
        _loading = false;
    }
}