@using MudBlazor
@using Color = MudBlazor.Color
@using System.ComponentModel.Design.Serialization

@inject IncomesClient IncomesClient

<MudText Typo="Typo.h4">Incomes</MudText>

@if (_loading)
{
    <MudProgressCircular Indeterminate />
}
else
{
    <MudDataGrid Items="_incomes" ReadOnly="false" 
                 EditMode="DataGridEditMode.Form" 
                 CommittedItemChanges="async (Income income) => await SaveAsync(income)" 
                 EditTrigger="DataGridEditTrigger.Manual">
        <Columns>
            <MudBlazor.Column T="Income" Field="@nameof(Income.Name)" CellClass="mud-typography-body1"/>
            <MudBlazor.Column T="Income" Field="@nameof(Income.ExactMoney)" Title="Amount">
                <CellTemplate>
                    <MudText>
                        $@context.Item.ExactMoney.ToString("F2")
                    </MudText>
                </CellTemplate>
                <EditTemplate>
                    <MudNumericField @bind-Value="context.Item.ExactMoney" Label="Amount" Adornment="Adornment.Start" AdornmentText="$" Required Format="F2"/>
                </EditTemplate>
            </MudBlazor.Column>
            <MudBlazor.Column T="Income" Field="@nameof(Income.StartDate)" Title="Start Date">
                <CellTemplate>
                    <DateDisplay Date="context.Item.StartDate"/>
                </CellTemplate>
                <EditTemplate>
                    <MudDatePicker Date="context.Item.StartDate" DateChanged="date => context.Item.StartDate = date.Value" Label="Start Date" Required/>
                </EditTemplate>
            </MudBlazor.Column>
            <MudBlazor.Column T="Income" Title="Paid Every">
                <CellTemplate>
                    <IntervalDisplay Interval="context.Item.Interval" IntervalUnits="context.Item.IntervalUnits" />
                </CellTemplate>
                <EditTemplate>
                    <MudText Class="pt-4">Paid Every</MudText>
                    <IntervalFullInput @bind-Interval="context.Item.Interval" @bind-IntervalUnits="context.Item.IntervalUnits"/>
                </EditTemplate>
            </MudBlazor.Column>
            <MudBlazor.Column T="Income">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Rounded.Edit" OnClick="context.Actions.StartEditingItem"/>
                    <MudIconButton Icon="@Icons.Rounded.Delete" Color="Color.Tertiary" OnClick="async () => await DeleteAsync(context.Item)"/>
                </CellTemplate>
            </MudBlazor.Column>
        </Columns>
        <NoRecordsContent>
            <MudText Typo="Typo.body1">
                No incomes
            </MudText>
        </NoRecordsContent>
    </MudDataGrid>
}

@code
{
    private bool _loading;

    private IReadOnlyList<Income>? _incomes;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    internal async Task ReloadAsync(bool forceReload = false)
    {
        _loading = true;
        
        if (forceReload)
        {
            StateHasChanged();
        }

        _incomes = await IncomesClient.GetIncomesAsync();
        
        _loading = false;
        
        if (forceReload)
        {
            StateHasChanged();
        }
    }

    private async Task DeleteAsync(Income income)
    {
        _loading = true;

        await IncomesClient.DeleteIncomeAsync(income.Id);
        
        _loading = false;

        await ReloadAsync();
    }


    private async Task SaveAsync(Income income)
    {
        await IncomesClient.UpdateIncomeAsync(income.Id, income);
    }
}