@inject IRecurringExpenseRepository _expenseRepository

<RepositoryWrapper @ref="_repoRef"
                   TRepository="IRecurringExpenseRepository"
                   Action="x => x.GetAllByUserIdAsync(UserId)"
                   TResponse="IReadOnlyList<RecurringExpense>"
                   Context="expenses"
                   ChildHandlesLoading="true">
    <Title Level="3">Recurring Expenses</Title>
    <Table DataSource="expenses" Loading="LoadingAggregate" Context="tableContext">
        <Column Title="Name" @bind-Field="@tableContext.Name" Sortable/>
        <Column Title="Exact" TData="decimal?" DataIndex="Money.Exact" Format="$0" Sortable/>
        <Column Title="Relative" TData="decimal?" DataIndex="Money.Percent" Format="0%" Sortable/>
        <Column Title="Start Date" @bind-Field="@tableContext.StartDate" Format="dd/MM/yyyy" Sortable/>
        <Column Title="Interval Units" @bind-Field="@tableContext.IntervalUnits" Sortable/>
        <Column Title="Interval" @bind-Field="@tableContext.Interval" Sortable/>
        <Column Title="From Saver" @bind-Field="@tableContext.FromSaverId">
            @{      
                // TODO: Refactor (3 places) && SOURCE FROM HERE
                var saver = Accounts.Data.FirstOrDefault(x => x.Id == tableContext.FromSaverId);
            }
            @if (saver != null)
            {
                <span>@(saver.Attributes.DisplayName) ($@(saver.Attributes.Balance.Value))</span>
            }
        </Column>
        <Column Title="From Income" @bind-Field="@tableContext.FromIncomeId">
            @{
                // TODO: Refactor
                var income = Incomes.FirstOrDefault(x => x.Id == tableContext.FromIncomeId);
            }
            @(income?.ToString() ?? string.Empty)
        </Column>
        <ActionColumn>
            <Space>
                <SpaceItem>
                    <Button Danger OnClick="async () => await DeleteAsync(tableContext)">Remove</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</RepositoryWrapper>

@code
{
    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }
    
    [CascadingParameter(Name = "UpApiContext")]
    public PaginatedDataResponse<AccountResource> Accounts { get; set; }
    
    [CascadingParameter(Name = "RepoContext")]
    public IReadOnlyList<Income> Incomes { get; set; }

    public RepositoryWrapper<IRecurringExpenseRepository, IReadOnlyList<RecurringExpense>> RepositoryWrapper => _repoRef;
    
    private bool _loading;

    private bool LoadingAggregate => _loading ? _loading : _repoRef.Loading;
    
    private RepositoryWrapper<IRecurringExpenseRepository, IReadOnlyList<RecurringExpense>> _repoRef;
    
    private async Task DeleteAsync(RecurringExpense expense)
    {
        _loading = true;

        await _expenseRepository.DeleteAsync(expense);
        
        _loading = false;

        await _repoRef.ReloadAsync();
    }
}
