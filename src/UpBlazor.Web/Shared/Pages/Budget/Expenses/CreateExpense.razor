@using UpBlazor.Core.Models.Enums
@using System.Text.RegularExpressions

@inject IExpenseRepository _expenseRepository
@inject IRecurringExpenseRepository _recurringExpenseRepository

<Card Title="New Expense">
    <Form Model="_request" 
          LabelColSpan="4"
          WrapperColSpan="20"
          OnFinish="async () => await OnFormFinishAsync(UserId)"
          Loading="_loading"
          Context="formContext">
        <FormItem>
            <Input DebounceMilliseconds="int.MaxValue" @bind-Value="@formContext.Name" />
        </FormItem>
        <FormItem Label="Cost">
            <InputGroup>
                <AntDesign.InputNumber Style="min-width: 9rem" TValue="decimal?" Formatter="MoneyFormat" Parser="MoneyParse" @bind-Value="@formContext.Amount.Exact" DefaultValue="50M" Min="0" Step="0.01M" OnChange="x => formContext.Amount.Percent = null"/>
                <AntDesign.InputNumber Style="min-width: 7rem" TValue="decimal?" Formatter="PercentFormat" Parser="PercentParse" @bind-Value="@formContext.Amount.Percent" Min="0" Step="1" OnChange="x => formContext.Amount.Exact = null"/>
            </InputGroup>
        </FormItem>
        <FormItem Label="Source">
            <InputGroup>
                <IncomeSelector @bind-SelectedIncome="SelectedIncome" />
                <SaverSelector @bind-SelectedSaver="SelectedSaver" />
            </InputGroup>
        </FormItem>
        <FormItem Label="@DateLabel">
            <DatePicker @bind-Value="@formContext.PaidByDate" DefaultValue="DateTime.Now"/>
        </FormItem>
        <FormItem Label="Regular Payments">
            <InputGroup>
                <AntDesign.Checkbox Style="padding-right: 1rem" @bind-Value="formContext.RegularPayments" OnChange="OnRegularPaymentEnabledChange" /> 
                @if (formContext.RegularPayments)
                {
                    <AntDesign.InputNumber Disabled="!_request.RegularPayments" Style="min-width: 7rem" TValue="int?" @bind-Value="@formContext.IntervalUnits" Min="1" Step="1" DefaultValue="1"/>
                    <EnumSelect TValue="Interval" Placeholder="Interval" Disabled="!_request.RegularPayments" Style="min-width: 9rem" @bind-Value="formContext.Interval"/>
                }
            </InputGroup>
        </FormItem>
        <FormItem WrapperColOffset="4" WrapperColSpan="20">
            @* TODO: Implement expenses with relative cost on a saver *@
            <Button Type="primary" HtmlType="submit" Disabled="@(_request.RegularPayments && (!_request.Interval.HasValue || !_request.IntervalUnits.HasValue) || _request.Amount.Percent.HasValue && _request.FromSaverId != null)">
                Submit
            </Button>
        </FormItem>
    </Form>
</Card>

@code
{
    [CascadingParameter(Name = CascadingConstants.UserIdWrapper)]
    public string UserId { get; set; }
    
    [Parameter]
    public Func<Task> OnNewExpenseAsync { get; set; }
    
    private ExpenseRequest _request = new();

    private bool _loading;

    private string DateLabel => _request.RegularPayments ? "Start Date" : "Due By";

    private async Task OnFormFinishAsync(string currentUserId)
    {
        _loading = true;

        if (_request.Amount.Percent.HasValue)
        {
            _request.Amount.Percent /= 100;
        }

        if (_request.RegularPayments)
        {
            await _recurringExpenseRepository.AddAsync(new RecurringExpense
            {
                Name = _request.Name,
                Interval = _request.Interval.Value,
                IntervalUnits = _request.IntervalUnits.Value,
                Money = _request.Amount,
                StartDate = _request.PaidByDate,
                UserId = currentUserId,
                FromIncomeId = _request.FromIncomeId,
                FromSaverId = _request.FromSaverId
            });
        }
        else
        {
            await _expenseRepository.AddAsync(new Expense
            {
                Name = _request.Name,
                UserId = currentUserId,
                Money = _request.Amount,
                PaidByDate = _request.PaidByDate,
                FromIncomeId = _request.FromIncomeId,
                FromSaverId = _request.FromSaverId
            });
        }

        _request = new();
        SelectedIncome = null;
        SelectedSaver = null;
        
        _loading = false;

        if (OnNewExpenseAsync != null)
        {
            await OnNewExpenseAsync.Invoke();
        }
    }

    private string MoneyFormat(decimal? value) => value != null ? $"${value:N2}" : "Exact ($)";

    private string MoneyParse(string value) => Regex.Replace(value, @"\$\s?|(,*)", "");

    private string PercentFormat(decimal? value) => value != null ? value + "%" : "Relative (%)";

    private string PercentParse(string value) => value.Replace("%", "");

    private void OnRegularPaymentEnabledChange(bool enabled)
    {
        if (!enabled)
        {
            _request.Interval = null;
            _request.IntervalUnits = null;
        }
    }
    
    private AccountResource _selectedSaver;
    private Income _selectedIncome;

    private AccountResource SelectedSaver
    {
        get => _selectedSaver;
        set
        {
            _selectedSaver = value;
            _request.FromSaverId = value?.Id;
            
            if (value == null)
            {
                return;
            }
            
            _selectedIncome = null;
            _request.FromIncomeId = null;
        }
    }

    private Income SelectedIncome
    {
        get => _selectedIncome;
        set
        {
            _selectedIncome = value;
            _request.FromIncomeId = value?.Id;

            if (value == null)
            {
                return;
            }
            
            _selectedSaver = null;
            _request.FromSaverId = null;
        }
    }

    private class ExpenseRequest
    {

        [DisplayName("Name"), Required]
        public string Name { get; set; }
        [Required]
        public Money Amount { get; set; } = new();
        
        [Required]
        public DateTime PaidByDate { get; set; }
        
        [DisplayName("Regular Payment")]
        public Interval? Interval { get; set; }
        public int? IntervalUnits { get; set; }
        
        public bool RegularPayments { get; set; }

        public string FromSaverId { get; set; }
        public Guid? FromIncomeId { get; set; }
    }
}
