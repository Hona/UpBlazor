@typeparam TRepository
@typeparam TResponse

@inject TRepository _repository

@if (CascadedResponse != null)
{
    <CascadingValue Name="@CascadingConstants.RepositoryWrapper" Value="CascadedResponse" >
        @ChildContent(CascadedResponse)
    </CascadingValue>
}
else
{
    if (_loading && !ChildHandlesLoading)
    {
        @*<Spin />*@
    }
    else
    {
        <CascadingValue Name="@CascadingConstants.RepositoryWrapper" Value="_response" >
            @ChildContent(_response)
        </CascadingValue>
    }
}

@code {
    [Parameter]
    public RenderFragment<TResponse> ChildContent { get; set; }

    [Parameter]
    public Func<TRepository, Task<TResponse>> Action { get; set; }

    [Parameter]
    public Action OnLoad { get; set; }

    [Parameter]
    public bool ChildHandlesLoading { get; set; }

    [CascadingParameter(Name = CascadingConstants.RepositoryWrapper)]
    public TResponse CascadedResponse { get; set; }

    public bool Loading => _loading;

    private bool _loading;
    private TResponse _response;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        _response = await Action.Invoke(_repository).ConfigureAwait(false);
        CascadedResponse = default;

        _loading = false;

        OnLoad?.Invoke();
        StateHasChanged();
    }

    public async Task ReloadAsync() => await OnParametersSetAsync().ConfigureAwait(false);
}