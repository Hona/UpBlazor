@inject ICurrentUserService _currentUserService

@if (CascadedUserId != null)
{
    <CascadingValue Name="@CascadingConstants.UserIdWrapper" Value="CascadedUserId">
        @ChildContent(CascadedUserId)
    </CascadingValue>
}
else
{
    if (_loading)
    {
        <Spin/>
    }
    else
    {
        <CascadingValue Name="@CascadingConstants.UserIdWrapper" Value="_userId">
            @ChildContent(_userId)
        </CascadingValue>
    }
}

@code 
{
    [Parameter]
    public RenderFragment<string> ChildContent { get; set; }
    
    [CascadingParameter(Name = CascadingConstants.UserIdWrapper)]
    public string CascadedUserId { get; set; }
    
    private bool _loading;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        _userId = await _currentUserService.GetUserIdAsync();
        CascadedUserId = null;

        _loading = false;
    }

}