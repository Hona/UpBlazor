@using System.Text.RegularExpressions
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Color = MudBlazor.Color
@inject IncomesClient IncomesClient

<MudCard Class="mt-4">
    <MudCardContent>
        <MudText Typo="Typo.h6">
            New Income
        </MudText>
        <MudForm @ref="_form">
            <MudTextField @bind-Value="_request.Name" Label="Name" Required/>
            <MudNumericField @bind-Value="_request.ExactMoney" Adornment="Adornment.Start" AdornmentText="$" Label="Amount" Required Format="F2"/>
            <MudDatePicker @bind-Date="_request.StartDate" Label="Start Date" Required/>
            
            <MudText Class="pt-6">Paid Every</MudText>
            
            <IntervalFullInput @bind-Interval="_request.Interval" @bind-IntervalUnits="_request.IntervalUnits" />
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary" OnClick="OnFormFinishAsync">
            Create
        </MudButton>
    </MudCardActions>
</MudCard>

@code
{
    [Parameter]
    public EventCallback OnNewIncome { get; set; }
    
    private IncomeRequest _request = new();

    private bool _loading;

    private MudForm _form;
    
    private async Task OnFormFinishAsync()
    {
        _loading = true;
        
        await _form.Validate();

        if (!_form.IsValid)
        {
            _loading = false;
            return;
        }

        await IncomesClient.CreateIncomeAsync(new CreateIncomeCommand
        {
            Name = _request.Name,
            ExactMoney = _request.ExactMoney,
            StartDate = _request.StartDate.Value,
            Interval = _request.Interval,
            IntervalUnits = _request.IntervalUnits
        });
                
        _request = new();
        _loading = false;

        if (OnNewIncome.HasDelegate)
        {
            await OnNewIncome.InvokeAsync();
        }
    }

    private string MoneyFormat(decimal value) => $"${value:N2}";

    private string MoneyParse(string value) => Regex.Replace(value, @"\$\s?|(,*)", "");


    private class IncomeRequest
    {
        [Required]
        public string Name { get; set; }
        [Required]
        public DateTime? StartDate { get; set; }
        [Required]
        public decimal ExactMoney { get; set; }
        [Required]
        public Interval Interval { get; set; }
        [Required]
        public int IntervalUnits { get; set; }
    }
}
