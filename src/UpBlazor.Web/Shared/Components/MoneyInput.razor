@using System.Text.RegularExpressions

<AntDesign.InputNumber Disabled="@(!_isExact)" Style="min-width: 9rem" TValue="decimal?" Formatter="MoneyFormat" Parser="MoneyParse" @bind-Value="@Amount.Exact" DefaultValue="50M" Min="0" Step="0.01M" OnChange="x => Amount.Percent = null"/>
<AntDesign.InputNumber Disabled="@_isExact" Style="min-width: 7rem" TValue="decimal?" Formatter="PercentFormat" Parser="PercentParse" @bind-Value="@Amount.Percent" Min="0" Step="1" OnChange="x => Amount.Exact = null"/>
<AntDesign.Switch @bind-Checked="@_isExact" CheckedChildren="Exact" UnCheckedChildren="Relative" OnChange=@OnCostTypeChange />

@code {
    private Money _amount;
    [Parameter] public Money Amount 
    { 
        get => _amount;
        set 
        {
            if (_amount != value)
            {
                _amount = value;
                AmountChanged.InvokeAsync(_amount);
            }
        }
    }

    [Parameter] public EventCallback<Money> AmountChanged { get; set; }

    private void OnCostTypeChange() 
    {
        if (_isExact)
        {
            Amount.Exact = 50M; 
            Amount.Percent = null;
        }
        else 
        {
            Amount.Exact = null;
            Amount.Percent = 0M;
        }        
    }

    private bool _isExact = true;

    private string MoneyFormat(decimal? value) => value != null ? $"${value:N2}" : "Exact ($)";

    private string MoneyParse(string value) => Regex.Replace(value, @"\$\s?|(,*)", "");

    private string PercentFormat(decimal? value) => value != null ? value + "%" : "Relative (%)";

    private string PercentParse(string value) => value.Replace("%", "");
}