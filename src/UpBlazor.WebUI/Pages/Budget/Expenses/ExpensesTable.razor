@using MudBlazor
@using Color = MudBlazor.Color
@using System.ComponentModel.Design.Serialization

@inject ExpensesClient ExpensesClient
@inject IncomesClient IncomesClient
@inject UpClient UpClient

<MudText Typo="Typo.h4">
    Expenses
</MudText>

<MudDataGrid Items="_expenses" Loading="_loading" ReadOnly="false" 
             EditMode="DataGridEditMode.Form" 
             StartedEditingItem="(Expense expense) => HandleStartedEditingItem(expense)"
             CommittedItemChanges="async (Expense expense) => await SaveAsync(expense)" 
             EditTrigger="DataGridEditTrigger.Manual">
    <Columns>
        <MudBlazor.Column T="Expense" Field="@nameof(Expense.Name)" CellClass="mud-typography-body1" />
        <MudBlazor.Column T="Expense" Title="Amount">
            <CellTemplate>
                <ExactOrRelativeMoneyDisplay Item="context.Item.Money"/>
            </CellTemplate>
            <EditTemplate>
                <MoneyInput @bind-Amount="context.Item.Money" Required />
            </EditTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="Expense" Field="@nameof(Expense.PaidByDate)" Title="Paid By">
            <CellTemplate>
                <DateDisplay Date="context.Item.PaidByDate"/>
            </CellTemplate>
            <EditTemplate>
                <MudDatePicker Date="context.Item.PaidByDate" DateChanged="date => context.Item.PaidByDate = date.Value" Label="Paid By" Required/>
            </EditTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="Expense" Title="From Saver">
            <CellTemplate>
                <SaverIdColumn SaverId="@context.Item.SaverId" Accounts="_accounts"/>
            </CellTemplate>
            <EditTemplate>
                @if (_editExpenseSource is not null)
                {
                    <ExpenseSourceInput @bind-Value="_editExpenseSource" Required />
                }
            </EditTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="Expense" Title="From Income">
            <CellTemplate>
                <IncomeIdColumn IncomeId="@context.Item.FromIncomeId" Incomes="_incomes"/>
            </CellTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="Expense" >
            <CellTemplate>
                <MudIconButton Icon="@Icons.Rounded.Edit" OnClick="context.Actions.StartEditingItem"/>
                <MudIconButton Icon="@Icons.Rounded.Delete" Color="Color.Tertiary" OnClick="async () => await DeleteAsync(context.Item)"/>
            </CellTemplate>
        </MudBlazor.Column>
    </Columns>
    <NoRecordsContent>
        <MudText Typo="Typo.body1">
            No expenses
        </MudText>
    </NoRecordsContent>
</MudDataGrid>

@code
{
    private bool _loading;

    private IReadOnlyList<Expense>? _expenses;
    private IReadOnlyList<Income>? _incomes;
    private IReadOnlyList<AccountResource>? _accounts;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    internal async Task ReloadAsync(bool forceReload = false)
    {
        _loading = true;
        
        if (forceReload)
        {
            StateHasChanged();
        }

        _expenses = await ExpensesClient.GetExpensesAsync();
        _incomes = await IncomesClient.GetIncomesAsync();
        _accounts = await UpClient.GetAccountsAsync();

        _loading = false;

        if (forceReload)
        {
            StateHasChanged();
        }
    }
    
    private async Task DeleteAsync(Expense expense)
    {
        _loading = true;

        await ExpensesClient.DeleteExpenseAsync(expense.Id);

        _loading = false;

        await ReloadAsync();
    }

    private async Task SaveAsync(Expense expense)
    {
        expense.SaverId = _editExpenseSource.SaverId;
        expense.FromIncomeId = _editExpenseSource.IncomeId;
        
        await ExpensesClient.UpdateExpenseAsync(expense.Id, expense);
        _editExpenseSource = null;
    }

    private void HandleStartedEditingItem(Expense expense)
    {
        _editExpenseSource = new ExpenseSourceInput.ExpenseSource
        {
            SaverId = expense.SaverId,
            IncomeId = expense.FromIncomeId
        };
    }

    private ExpenseSourceInput.ExpenseSource? _editExpenseSource;
}
