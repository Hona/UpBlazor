@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using Color = MudBlazor.Color

@inject ExpensesClient ExpensesClient
@inject RecurringExpensesClient RecurringExpensesClient

<MudCard Class="mt-4">
    <MudCardContent>
        <MudText Typo="Typo.h6">
            New Expense
        </MudText>
        <MudForm @ref="_form">
            <MudTextField @bind-Value="_request.Name" Label="Name" Required />
            <MudText Class="pt-6">
                Cost
            </MudText>
            <MoneyInput @bind-Amount="_request.Amount" Required />
            
            <MudText Class="pt-6">
                From
            </MudText>
            <ExpenseSourceInput @bind-Value="_request.ExpenseSource" @ref="_expenseSourceInput" Required />
            <MudDatePicker @bind-Date="_request.PaidByDate" Label="Paid By" Required Class="mt-6"/>
            <MudSwitch @bind-Checked="_request.RegularPayments" Label="Is Repeating" Color="Color.Primary" Class="mt-6"/>
            @if (_request.RegularPayments)
            {
                <IntervalFullInput @bind-Interval="_request.Interval" @bind-IntervalUnits="_request.IntervalUnits"/>
            }
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary" OnClick="OnFormFinishAsync">
            Create
        </MudButton>
    </MudCardActions>
</MudCard>

@code
{
    [Parameter]
    public EventCallback OnNewExpense { get; set; }
    
    private ExpenseRequest _request = new();

    private bool _loading;

    private string DateLabel => _request.RegularPayments ? "Start Date" : "Due By";

    private ExpenseSourceInput _expenseSourceInput;

    private MudForm _form;

    private async Task OnFormFinishAsync()
    {
        _loading = true;

        await _form.Validate();

        if (!_form.IsValid)
        {
            _loading = false;
            return;
        }

        if (_request.RegularPayments)
        {
            if (_expenseSourceInput.Value.IncomeId is not null)
            {
                throw new Exception("This path shouldn't be possible");
            }

            await RecurringExpensesClient.CreateRecurringExpenseAsync(new CreateRecurringExpenseCommand
            {
                Amount = _request.Amount,
                Interval = _request.Interval,
                IntervalUnits = _request.IntervalUnits,
                Name = _request.Name,
                StartDate = _request.PaidByDate.Value,
                FromSaverId = _expenseSourceInput.Value.SaverId
            });
        }
        else
        {
            await ExpensesClient.CreateExpenseAsync(new CreateExpenseCommand
            {
                Amount = _request.Amount,
                Name = _request.Name,
                PaidByDate = _request.PaidByDate.Value,
                FromSaverId = _expenseSourceInput.Value.SaverId,
                FromIncomeId = _expenseSourceInput.Value.IncomeId
            });
        }

        _request = new ExpenseRequest();

        _expenseSourceInput.Reset();

        _loading = false;

        if (OnNewExpense.HasDelegate)
        {
            await OnNewExpense.InvokeAsync();
        }
    }

    private void OnRegularPaymentEnabledChange(bool enabled)
    {
        if (!enabled)
        {
            _request.Interval = default;
            _request.IntervalUnits = default;
        }
        else
        {
            // Change type to saver
            _expenseSourceInput.ChangeType(false);
        }
    }

    private class ExpenseRequest
    {
        private ExpenseSourceInput.ExpenseSource _expenseSource = new();

        [DisplayName("Name"), Required]
        public string Name { get; set; }
        [Required]
        public Money Amount { get; set; } = new();
        
        [Required]
        public DateTime? PaidByDate { get; set; }
        
        [DisplayName("Regular Payment")]
        public Interval Interval { get; set; }
        public int IntervalUnits { get; set; }
        
        public bool RegularPayments { get; set; }

        public ExpenseSourceInput.ExpenseSource ExpenseSource
        {
            get => _expenseSource;
            set
            {
                _expenseSource = value;
                
                if (value.IncomeId.HasValue)
                {
                    // Automatically regular payments
                    RegularPayments = false;
                    PaidByDate = DateTime.MinValue;
                }
            }
        }
    }
}
