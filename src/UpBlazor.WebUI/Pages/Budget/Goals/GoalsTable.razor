@inject GoalsClient GoalsClient
@inject UpClient UpClient

@if (_loading)
{
    <Spin />
}
else
{
    <Title Level="3">Goals</Title>
    
    <Table DataSource="_goals" Loading="_loading">
        <Column Title="Name" @bind-Field="@context.Name" Sortable/>
        <Column Title="Amount"  @bind-Field="@context.Amount" Format="$0.00" Sortable/>
        <Column Title="Date" @bind-Field="@context.Date" Format="dd/MM/yyyy" Sortable/>
        <Column Title="Saver" @bind-Field="@context.SaverId">
            @{
                var saver = _accounts.FirstOrDefault(x => x.Id == context.SaverId);
            }
            <span>@(saver?.Attributes.DisplayName ?? "N/A") ($@(saver?.Attributes.Balance.Value ?? "N/A"))</span>
        </Column>
        <ActionColumn>
            <Space>
                <SpaceItem>
                    <Button Danger OnClick="async () => await DeleteAsync(context)">Remove</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
}

@code
{
    private bool _loading;

    private IReadOnlyList<Goal> _goals;
    private IReadOnlyList<AccountResource> _accounts;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    internal async Task ReloadAsync(bool forceReload = false)
    {
        _loading = true;
        
        if (forceReload)
        {
            StateHasChanged();
        }

        _goals = await GoalsClient.GetGoalsAsync();
        _accounts = await UpClient.GetAccountsAsync();

        _loading = false;
        
        if (forceReload)
        {
            StateHasChanged();
        }
    }
    
    private async Task DeleteAsync(Goal goal)
    {
        _loading = true;

        await GoalsClient.DeleteGoalAsync(goal.Id);
        
        _loading = false;

        await ReloadAsync();
    }
}