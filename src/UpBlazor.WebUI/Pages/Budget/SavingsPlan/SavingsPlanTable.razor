@using MudBlazor
@using Color = MudBlazor.Color

@inject SavingsPlanClient SavingsPlanClient
@inject UpClient UpClient

<MudText Typo="Typo.h5">
     Income
</MudText>

<MudDataGrid Items="_savingsPlans" Loading="_loading">
    <Columns>
        <MudBlazor.Column T="SavingsPlan" Field="@nameof(SavingsPlan.Name)" />
        <MudBlazor.Column T="SavingsPlan" Field="@nameof(SavingsPlan.Amount)" Title="Amount">
            <CellTemplate>
                <ExactOrRelativeMoneyDisplay Item="@context.Item.Amount" />
            </CellTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="SavingsPlan" Field="@nameof(SavingsPlan.SaverId)" Title="To">
            <CellTemplate>
                <SaverIdColumn SaverId="@context.Item.SaverId" Accounts="_accounts" />
            </CellTemplate>
        </MudBlazor.Column>
        <MudBlazor.Column T="SavingsPlan">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Rounded.Delete" Color="Color.Tertiary" OnClick="async () => await DeleteAsync(context.Item)"/>
            </CellTemplate>
        </MudBlazor.Column>
    </Columns>
    <NoRecordsContent>
        <MudText Typo="Typo.body1">
            No savings plans
        </MudText>
    </NoRecordsContent>
</MudDataGrid>

@code
{
    [Parameter]
    public Income Income { get; set; } = null!;

    private bool _loading;

    private IReadOnlyList<SavingsPlan>? _savingsPlans;
    private IReadOnlyList<AccountResource>? _accounts;

    protected override async Task OnParametersSetAsync()
    {
        ArgumentNullException.ThrowIfNull(Income);
        await ReloadAsync();
    }

    internal async Task ReloadAsync(bool forceReload = false)
    {
        _loading = true;

        if (forceReload)
        {
            StateHasChanged();
        }

        _savingsPlans = await SavingsPlanClient.GetSavingsPlansAsync(Income.Id);
        _accounts = await UpClient.GetAccountsAsync();

        _loading = false;

        if (forceReload)
        {
            StateHasChanged();
        }
    }

    private async Task DeleteAsync(SavingsPlan savingsPlan)
    {
        _loading = true;

        await SavingsPlanClient.DeleteSavingsPlanAsync(savingsPlan.Id);

        _loading = false;

        await ReloadAsync();
    }
}
