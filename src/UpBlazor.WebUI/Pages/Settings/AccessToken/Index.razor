@page "/settings/up-access-token"

@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using Color = MudBlazor.Color

@inject UpClient UpClient

@if (_loading)
{
    <MudProgressLinear Indeterminate />
}
else if (_formLoading)
{
    <MudProgressCircular Indeterminate />
}
else if (IsSet)
{
    if (_pingResponse == null)
    {
        <MudAlert Severity="Severity.Error" Class="mt-4">
            Could not access your account
        </MudAlert>
    }
    else
    {
        <MudAlert Severity="Severity.Success" Class="mt-4">
            Valid account access! @_pingResponse.Meta.StatusEmoji
        </MudAlert>
    }
}
else
{
    <MudAlert Severity="Severity.Warning" Class="mt-4">
        <MudText Typo="Typo.h6" Color="Color.Warning">
            No access token has been set
        </MudText>
        <MudText>
            Please follow the instructions below
        </MudText>
    </MudAlert>
}

<MudCard Class="mt-4">
    <MudCardContent>
        <MudText Typo="Typo.h6">
            Your Access Token
        </MudText>
        <MudStack Row AlignItems="AlignItems.Center">
            <MudText>
                Don't have an access token yet?
            </MudText>        
            <MudButton Href="https://api.up.com.au/getting_started" Target="_blank"
                       Variant="Variant.Filled" Color="Color.Secondary" DisableElevation>
                Get Access Token
            </MudButton>
        </MudStack>

        <MudTextField @bind-Value="_setAccessToken.Value" Label="API Token" />
        <MudText Typo="Typo.subtitle1">
            Want to try it out? Use 'up:demo'
        </MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" DisableElevation OnClick="OnFinishAsync">
            Save
        </MudButton>
        <MudButton Color="Color.Error" OnClick="OnClearAccessTokenClickAsync">
            Clear
        </MudButton>
    </MudCardActions>
</MudCard>

@code
{
    private bool _loading;
    private bool _formLoading;

    private bool IsSet => _pingResponse != null;
    
    private PingResponse? _pingResponse;
    
    private readonly SetAccessToken _setAccessToken = new();

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    private async Task ReloadAsync()
    {
        _loading = true;

        try
        {
            _pingResponse = await UpClient.PingAsync(false);
        }
        catch
        {
            _pingResponse = null;
        }

        _loading = false;
    }
    
    private async Task OnFinishAsync()
    {
        _formLoading = true;

        try
        {
            await UpClient.TrySetTokenAsync(_setAccessToken.Value);
            
            // Success
            _setAccessToken.Value = string.Empty;
        }
        catch
        {
            _setAccessToken.Value = string.Empty;

            _formLoading = false;
            return;
        }

        _formLoading = false;

        await ReloadAsync();
    }

    private async Task OnClearAccessTokenClickAsync()
    {
        _loading = true;

        await UpClient.ClearTokenAsync();

        _loading = false;
        
        await ReloadAsync();
    }

    private class SetAccessToken
    {
        [Required, DisplayName("API Access Token")]
        public string? Value { get; set; }
    }
}