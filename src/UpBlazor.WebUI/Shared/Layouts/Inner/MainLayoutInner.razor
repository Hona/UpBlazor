@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using MudBlazor
@using Color = MudBlazor.Color
@using Anchor = MudBlazor.Anchor
@inject NavigationManager _navigationManager

@implements IDisposable

<MudLayout>
    <MudAppBar Style="width: 100vw" Elevation="1">
        <MudIconButton Icon="@Icons.Filled.Menu" Edge="Edge.Start" Color="Color.Inherit" OnClick="@((e) => ToggleDrawer())" />
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudImage Src="/img/up-logo-light-transparent-bg.svg" Fluid Height="60" Width="60"/>
            <MudText Typo="Typo.h5" Style="letter-spacing: 0.2rem; color: white">Blazor</MudText>
        </MudStack>
        <MudSpacer/>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudMenu Icon="@Icons.Outlined.Notifications" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" LockScroll="true" ListClass="pa-2"> 
                <div class="d-flex justify-space-between align-center px-2">
                    <MudText Typo="Typo.subtitle2">Notifications</MudText>
                </div>
                <div class="d-flex justify-center align-center px-2 py-8 relative">
                    <NotificationsList />
                </div>            
            </MudMenu>
            <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" LockScroll="true" Class="ml-2">
                <ActivatorContent>
                    <UserProfilePicture />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Href="/authentication/logout">Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <UserProfilePicture Class="cursor-pointer" OnClick="ProfileDrawer" />
        </MudHidden>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Always">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="pb-8">
        <MudContainer MaxWidth="MaxWidth.Large">
            <ErrorBoundary @ref="_errorBoundary">
                <ChildContent>
                    @ChildContent
                </ChildContent>
                <ErrorContent>
                    @if (context is ApiException {StatusCode: StatusCodes.Status403Forbidden} apiException && 
                         apiException.Response.Contains("Up access token is not set", StringComparison.OrdinalIgnoreCase))
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-4">
                            <MudText Typo="Typo.h5" Color="Color.Error">
                                No Access Token
                            </MudText>
                            <MudText>
                                You have not set your Up API access token, please add it in the settings
                            </MudText>
                            <MudButton StartIcon="@Icons.Rounded.Settings" Href="/settings/up-access-token" Color="Color.Inherit">
                                Settings
                            </MudButton>
                        </MudAlert>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-4">
                            <MudText Typo="Typo.h5" Color="Color.Error">
                                Unhandle exception occurred
                            </MudText>
                            <MudText>
                                @context.Message
                            </MudText>
                            
                            <MudDivider />
                            
                            <MudText Typo="Typo.overline">
                                @context.Message
                            </MudText>
                            
                            <MudButton StartIcon="@Icons.Rounded.Home" Href="/home" Color="Color.Inherit">
                                Home
                            </MudButton>
                        </MudAlert>
                    }
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
        <UpFooter />
    </MudMainContent>
</MudLayout>

<MudDrawer @bind-Open="@_profileDrawerOpen" Anchor="Anchor.Top" Elevation="0" Variant="@DrawerVariant.Temporary" Class="@(_profileDrawerOpen ? "mud-transparent pa-3" : "mud-transparent invisible")">
    <MudPaper Elevation="0" Class="rounded-lg">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="px-4 pt-1">
            <UserProfilePicture />
            <MudStack Spacing="0" Class="flex-grow-1">
                <AuthorizeView>
                    <MudText Typo="Typo.body1">
                        @context.User.FindFirst("name")?.Value
                    </MudText>
                    <MudText Typo="Typo.subtitle2" Class="mt-n1 mud-text-secondary">
                        @context.User.FindFirst("nickname")?.Value
                    </MudText>
                </AuthorizeView>
            </MudStack>
            <MudIconButton Icon="@Icons.Filled.Close" Edge="Edge.End" Class="mud-text-secondary" OnClick="ProfileDrawer" />
        </MudStack>
        <MudDivider Class="mt-2" />
        <MudNavMenu Rounded="true" Color="Color.Primary" Class="pa-2">
            <MudNavLink Href="/notifications">
                <MudText Typo="Typo.body2" Class="ml-n4"><b>Notifications</b></MudText>
            </MudNavLink>
            <MudNavLink Href="/authentication/logout">
                <MudText Typo="Typo.body2" Class="ml-n4"><b>Sign out</b></MudText>
            </MudNavLink>
        </MudNavMenu>
    </MudPaper>
</MudDrawer>

@code{ 
    private bool _drawerOpen = true;
    private bool _profileDrawerOpen = false;
    private bool _searchDialogOpen = false;
    
    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;
    private void ProfileDrawer() => _profileDrawerOpen = !_profileDrawerOpen;
    private void OpenSearchDialog() => _searchDialogOpen = true;
}

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private bool _siderCollapsed;
    private ErrorBoundary? _errorBoundary;

    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += RecoverError;
    }

    private void RecoverError(object? sender, LocationChangedEventArgs e)
    {
        _errorBoundary?.Recover();
    }

    public void Dispose()
    {
        _navigationManager.LocationChanged -= RecoverError;
    }
}
