@using System.Runtime.CompilerServices
@using MudBlazor

<MudStack Row AlignItems="AlignItems.End">
    <IncomeSelector @bind-SelectedIncome="SelectedIncome" SelectFirst="false" Required="IsRequired()" />
    <MudText>or</MudText>
    <SaverSelector @bind-SelectedSaver="SelectedSaver" Required="IsRequired()" />
</MudStack>

@code
{
    private AccountResource? _selectedSaver;
    private Income? _selectedIncome;

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public ExpenseSource Value { get; set; } = null!;

    [Parameter]
    public EventCallback<ExpenseSource> ValueChanged { get; set; }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(Value);
    }

    private bool IsRequired()
    {
        return Required && Value?.IncomeId is null && Value?.SaverId is null;
    }

    private AccountResource? SelectedSaver
    {
        get => _selectedSaver;
        set
        {
            _selectedSaver = value;
            var newValue = value is null ? new ExpenseSource { IncomeId = Value.IncomeId } : new ExpenseSource { SaverId = value.Id };

            if (value == null)
            {
                InvokeValueChanged(newValue);
                return;
            }

            _selectedIncome = null;
            InvokeValueChanged(newValue);
        }
    }

    private Income? SelectedIncome
    {
        get => _selectedIncome;
        set
        {
            _selectedIncome = value;
            var newValue = value is null ? new ExpenseSource { SaverId = Value.SaverId} : new ExpenseSource { IncomeId = value.Id };

            if (value == null)
            {
                InvokeValueChanged(newValue);
                return;
            }

            _selectedSaver = null;
            InvokeValueChanged(newValue);
        }
    }

    public void ChangeType(bool isIncome)
    {
        if (isIncome)
        {
            SelectedSaver = null;
        }
        else
        {
            SelectedIncome = null;
        }
    }

    private void InvokeValueChanged(ExpenseSource? newValue)
    {
        if (ValueChanged.HasDelegate)
        {
            ValueChanged.InvokeAsync(newValue);
        }
    }

    public void Reset()
    {
        _selectedIncome = null;
        _selectedSaver = null;
    }
    
    public class ExpenseSource
    {
        public string? SaverId { get; set; }
        public Guid? IncomeId { get; set; }
    }
}
