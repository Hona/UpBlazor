@page "/settings/two-up"
@using Humanizer

@inject ITwoUpRepository _twoUpRepository
@inject ITwoUpRequestRepository _twoUpRequestRepository
@inject IRegisteredUserRepository _registeredUserRepository
@inject ICurrentUserService _currentUserService

<Title Level="3">2Up</Title>

<UserIdWrapper Context="userId">
    <RepositoryWrapper @ref="_repositoryWrapper" Context="requests" 
                       TRepository="ITwoUpRequestRepository" 
                       Action="x => x.GetAllByRequesteeAsync(userId)" 
                       TResponse="IReadOnlyList<TwoUpRequest>">
        @if (requests.Any())
        {
            <Card>
                <AntList Bordered DataSource="@requests" Size="large">
                    <Header>
                        <Title Level="4">
                            Pending Requests
                        </Title>
                    </Header>
                    <ChildContent Context="item">
                        <ListItem>
                            <Text>@item.RequesterName</Text>
                            @item.RequesterMessage
                            @((DateTime.Now - item.CreatedDate).Humanize() + " ago")
                            <Space>
                                <SpaceItem>
                                    <Button Loading="_acceptRequestLoading" OnClick="async () => await AcceptRequestAsync(item)">Accept</Button>
                                </SpaceItem>
                                <SpaceItem>
                                    <Button Loading="_acceptRequestLoading" OnClick="async () => await IgnoreRequestAsync(item)" Danger>Ignore</Button>
                                </SpaceItem>
                            </Space>
                        </ListItem>
                    </ChildContent>
                </AntList>
            </Card>
            
            <Divider />
        }
    </RepositoryWrapper>
    
    <Card Title="Connect with your Player 2">
        <Form Model="_connectRequest" 
              LabelColSpan="4"
              WrapperColSpan="20"
              OnFinish="async () => await OnFormFinishAsync(userId)"
              Context="formContext">
            <FormItem>
                <Input @bind-Value="@formContext.Email" />
            </FormItem>
            <FormItem>
                <TextArea MinRows="2" @bind-Value="@formContext.Message" />
            </FormItem>
            <FormItem WrapperColOffset="4" WrapperColSpan="20">
                <Button Type="primary" HtmlType="submit">
                    Submit
                </Button>
            </FormItem>
        </Form>
    </Card>
    
    <Divider />

    <RepositoryWrapper TRepository="ITwoUpRepository" 
                       Action="x => x.GetAllByUserIdAsync(userId)" 
                       TResponse="IReadOnlyList<TwoUp>">
        @{
            var allUserIds = context.SelectMany(x => new[]
            {
                x.UserId1,
                x.UserId2
            }).Where(x => x != userId)
                .Distinct()
                .ToArray();
        }
        <RepositoryWrapper @ref="_registeredTwoUpsRef"
                           TRepository="IRegisteredUserRepository"
                           Action="x => x.GetAllByIds(allUserIds)"
                           TResponse="IReadOnlyList<RegisteredUser>"
                           Context="fullUsers">
            <Title Level="3">2Up Players</Title>
            <Table DataSource="fullUsers" Loading="_registeredTwoUpsLoading" Context="tableContext">
                <Column Title="Given Name" @bind-Field="@tableContext.GivenName" Sortable/>
                <Column @bind-Field="@tableContext.Email" Sortable/>
                <ActionColumn>
                    <Space>
                        <SpaceItem>
                            <Button Danger OnClick="async () => await DeleteAsync(userId, tableContext.Id)">Remove</Button>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </Table>
        </RepositoryWrapper>
    </RepositoryWrapper>
</UserIdWrapper>

@code
{
    private bool _acceptRequestLoading;

    private bool _registeredTwoUpsLoading;

    private ConnectRequest _connectRequest = new();

    private RepositoryWrapper<ITwoUpRequestRepository, IReadOnlyList<TwoUpRequest>> _repositoryWrapper;

    private RepositoryWrapper<IRegisteredUserRepository, IReadOnlyList<RegisteredUser>> _registeredTwoUpsRef;

    private async Task AcceptRequestAsync(TwoUpRequest request)
    {
        _acceptRequestLoading = true;
        
        await _twoUpRequestRepository.DeleteAsync(request);

        var twoUp = new TwoUp(request.RequesteeId, request.RequesterId);
        await _twoUpRepository.AddOrUpdateAsync(twoUp);
        
        _acceptRequestLoading = false;

        await _repositoryWrapper.ReloadAsync();
    }
    
    private async Task DeleteRequestAsync(TwoUpRequest request)
    {
        _acceptRequestLoading = true;
        
        await _twoUpRequestRepository.DeleteAsync(request);

        _acceptRequestLoading = false;

        await _repositoryWrapper.ReloadAsync();
    }

    private class ConnectRequest
    {
        [DisplayName("Email"), Required, EmailAddress, StringLength(128)]
        public string Email { get; set; }

        [DisplayName("Message"),StringLength(512)]
        public string Message { get; set; }
    }

    private async Task OnFormFinishAsync(string currentUserId)
    {
        var user = await _registeredUserRepository.GetByEmailAsync(_connectRequest.Email);
        
        await _twoUpRequestRepository.AddOrUpdateAsync(new TwoUpRequest
        {
            CreatedDate = DateTime.Now,
            RequesterId = currentUserId,
            RequesterName = await _currentUserService.GetGivenNameAsync(),
            RequesterMessage = _connectRequest.Message,
            RequesteeId = user.Id,
        });
    }

    private async Task DeleteAsync(string userId1, string userId2)
    {
        _registeredTwoUpsLoading = true;

        await _twoUpRepository.DeleteAsync(new TwoUp(userId1, userId2));

        await _registeredTwoUpsRef.ReloadAsync();

        _registeredTwoUpsLoading = false;
    }
}