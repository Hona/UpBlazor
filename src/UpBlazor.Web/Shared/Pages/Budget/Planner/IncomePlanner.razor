@using Humanizer
@using UpBlazor.Core.Helpers
@using UpBlazor.Web.ViewModels

<RepositoryWrapper TRepository="ISavingsPlanRepository"
                   Action="x => x.GetAllByIncomeIdAsync(Income.Id)"
                   TResponse="IReadOnlyList<SavingsPlan>"
                   Context="savingsPlans">
    <Card>
        <Statistic Title="Starting Total" Value="@Income.ExactMoney">
            <PrefixTemplate>
                $
            </PrefixTemplate>
        </Statistic>
    </Card>
    
    <Divider />
    
    @{
        var unbudgetedMoney = Income.ExactMoney;

        _exactSubTotals = new List<SavingsPlanRunningTotal>();

        foreach (var savingsPlan in savingsPlans.Where(x => x.Amount.Exact.HasValue))
        {
            unbudgetedMoney -= savingsPlan.Amount.Exact.Value;

            _exactSubTotals.Add(new SavingsPlanRunningTotal(savingsPlan, unbudgetedMoney));
        }

        _percentSubTotals = new List<SavingsPlanRunningTotal>();

        foreach (var savingsPlan in savingsPlans.Where(x => x.Amount.Percent.HasValue))
        {
            unbudgetedMoney -= Income.ExactMoney * savingsPlan.Amount.Percent.Value;

            _percentSubTotals.Add(new SavingsPlanRunningTotal(savingsPlan, unbudgetedMoney));
        }
    }

    <Title Level="4">Exact Savings Plan</Title>
    <Table DataSource="_exactSubTotals" Context="tableContext">
        <Column Title="Name" @bind-Field="@tableContext.Name" Sortable/>
        <Column Title="Amount" TData="decimal?" DataIndex="Amount.Exact" Format="$0" Sortable/>
        <SaverIdColumn Title="Saver" TableContext="tableContext" TTableContext="SavingsPlanRunningTotal"/>
        <Column Title="Running Total" Format="$0 remaining" @bind-Field="@tableContext.RunningTotal"/>
    </Table>
    
    <Title Level="4">Relative Savings Plan</Title>
    <Table DataSource="_percentSubTotals" Context="tableContext">
        <Column Title="Name" @bind-Field="@tableContext.Name" Sortable/>
        <Column Title="Amount" TData="decimal?" DataIndex="Amount.Percent" Format="0%" Sortable/>
        <SaverIdColumn Title="Saver" TableContext="tableContext" TTableContext="SavingsPlanRunningTotal"/>
        <Column Title="Running Total" Format="$0 remaining" @bind-Field="@tableContext.RunningTotal"/>
    </Table>
    
    <Divider />

    <Card>
        <Statistic Title="Unbudgeted Money" Value="@unbudgetedMoney">
            <PrefixTemplate>
                $
            </PrefixTemplate>
        </Statistic>
        
        <Divider />
        
        <Space Size=@(("8", "8")) Direction="DirectionVHType.Horizontal" Wrap>
            @{
                _savingsAmount = new Dictionary<AccountResource, decimal>();
            }
            @foreach (var account in Accounts.Data)
            {
                var total = 0M;

                if (account.Attributes.AccountType == AccountType.Transactional)
                {
                    total += unbudgetedMoney;
                }

                foreach (var exactSaving in _exactSubTotals.Where(x => x.SaverId == account.Id))
                {
                    total += exactSaving.Amount.Exact.Value;
                }

                foreach (var percentSaving in _percentSubTotals.Where(x => x.SaverId == account.Id))
                {
                    total += Income.ExactMoney * percentSaving.Amount.Percent.Value;
                }

                _savingsAmount[account] = total;

                <SpaceItem>
                    <Card Style="min-width: 300px" Title="@account.Attributes.DisplayName">
                        <Progress Percent="@((double)(total / Income.ExactMoney * 100))" Format='x => x.ToString("F1") + "%"' Status="@ProgressStatus.Normal"/>
                        <span>
                            $@total
                        </span>
                    </Card>
                </SpaceItem>
            }
        </Space>
    </Card>
    <Divider />
    <Card>
        @if (_savingsAmount != null)
        {
            var forecastData = Enumerable.Range(0, 60).SelectMany(x =>
            {
                var forecastOutput = new List<ForecastViewModel>();

                foreach (var (account, cycleSavings) in _savingsAmount)
                {
                    var cycleTimeSpan = Income.Interval.ToTimeSpan(Income.IntervalUnits);
                    
                    forecastOutput.Add(new ForecastViewModel
                    {
                        balance = (decimal)account.Attributes.Balance.ValueInBaseUnits / 100 + cycleSavings * x,
                        cycle = Income.StartDate
                            .FindLastCycleStart(Income.Interval, Income.IntervalUnits)
                            .Add(cycleTimeSpan * x)
                            .ToString("dd/MM/yyyy"),
                        accountName = account.Attributes.DisplayName
                    });
                }

                return forecastOutput;
            }).ToArray();
            
        <Title Level="4">Income Forecast</Title>
        <AntDesign.Charts.StackedArea Config="_forecastConfig" Data="@forecastData" ></AntDesign.Charts.StackedArea>
        }
    </Card>
</RepositoryWrapper>

@code 
{
    [CascadingParameter(Name = CascadingConstants.UpApiWrapper)]
    public PaginatedDataResponse<AccountResource> Accounts { get; set; }
    
    [Parameter]
    public Income Income { get; set; }

    private List<SavingsPlanRunningTotal> _exactSubTotals;
    private List<SavingsPlanRunningTotal> _percentSubTotals;

    private Dictionary<AccountResource, decimal> _savingsAmount;

    private class ForecastViewModel
    {
        public string cycle { get; set; }
        public decimal balance { get; set; }
        public string accountName { get; set; }
    }
    
    private AntDesign.Charts.StackedAreaConfig _forecastConfig = new()
    {
        XField = "cycle",
        YField = "balance",
        StackField = "accountName"
    };
}