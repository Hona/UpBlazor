@typeparam TRepository
@typeparam TResponse

@inject TRepository _repository

@if (_loading && !ChildHandlesLoading)
{
    @*<Spin />*@
}
else
{
    <CascadingValue Name="RepoContext" Value="_response" >
        @ChildContent(_response)
    </CascadingValue>
}

@code {
    [Parameter]
    public RenderFragment<TResponse> ChildContent { get; set; }
    
    [Parameter]
    public Func<TRepository, Task<TResponse>> Action { get; set; }
    
    [Parameter]
    public Action OnLoad { get; set; }
    
    [Parameter]
    public bool ChildHandlesLoading { get; set; }

    public bool Loading => _loading;

    private bool _loading;
    private TResponse _response;
    
    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        _response = await Action.Invoke(_repository);
        
        _loading = false;
        
        OnLoad?.Invoke();
        StateHasChanged();
    }

    public async Task ReloadAsync() => await OnParametersSetAsync();
}