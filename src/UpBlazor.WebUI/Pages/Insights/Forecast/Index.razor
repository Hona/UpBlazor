@page "/insights/forecast"

@using System.Globalization
@using Color = MudBlazor.Color
@using ChartType = ApexCharts.ChartType

@inject ForecastClient ForecastClient
@inject NormalizedClient NormalizedClient

@if (_loading)
{
    <MudProgressLinear Indeterminate />
}
else
{
    ArgumentNullException.ThrowIfNull(_totalForecastData);
    ArgumentNullException.ThrowIfNull(_expensesForecastData);
    ArgumentNullException.ThrowIfNull(_incomeForecastData);

    <MudStack Row AlignItems="AlignItems.Center">
        <MudSlider @bind-Value="_days"
                   Min="20" Max="3000"
                   Variant="Variant.Filled"
                   Step="1"
                   ValueLabel>
            Days Calculated: @_days
        </MudSlider>
        <MudButton OnClick="HandleLoadClick" Variant="Variant.Filled" Style="height: fit-content" Color="Color.Primary">
            Load
        </MudButton>
    </MudStack>

    <MudStack Class="mt-4">
        <MudCard Elevation="0" Outlined>
            <MudCardHeader>
                Summary
            </MudCardHeader>
            <MudCardContent>
                <MudDatePicker @bind-Date="_daySummaryDate"
                               IsDateDisabledFunc="@(date => date <= DateTime.Today || date >= DateTime.Today.AddDays((int)_days))"
                               Placeholder="Select a date to inspect"/>
                
                @if (_daySummaryDate.HasValue)
                {
                    var today = DateOnly.FromDateTime(_daySummaryDate.Value);
                    var yesterday = DateOnly.FromDateTime(_daySummaryDate.Value.AddDays(-1));
                    var beginning = DateOnly.FromDateTime(DateTime.Today);

                    var yesterdayIncome = _incomeForecastData
                        .Where(x => DateOnly.ParseExact(x.Cycle, "dd/MM/yyyy") == yesterday)
                        .Sum(x => x.Balance);

                    var beginningIncome = _incomeForecastData
                        .Where(x => DateOnly.ParseExact(x.Cycle, "dd/MM/yyyy") == beginning)
                        .Sum(x => x.Balance);

                    var todayIncome = _incomeForecastData
                        .Where(x => DateOnly.ParseExact(x.Cycle, "dd/MM/yyyy") == today)
                        .Sum(x => x.Balance);

                    var yesterdayExpense = _expensesForecastData
                        .Where(x => DateOnly.ParseExact(x.Cycle, "dd/MM/yyyy") == yesterday)
                        .Sum(x => x.Balance);

                    var beginningExpense = _expensesForecastData
                        .Where(x => DateOnly.ParseExact(x.Cycle, "dd/MM/yyyy") == beginning)
                        .Sum(x => x.Balance);

                    var todayExpense = _expensesForecastData
                        .Where(x => DateOnly.ParseExact(x.Cycle, "dd/MM/yyyy") == today)
                        .Sum(x => x.Balance);

                    <MudText>Delta - Prior Day</MudText>

                    <MudStack Row Class="flex-wrap">
                        <MoneyStatistic Title="Money In ⬆️" ValueColor="Color.Success" Amount="@(todayIncome - yesterdayIncome)" />
                        <MoneyStatistic Title="Money Out ⬇️" ValueColor="Color.Error" Amount="@(todayExpense - yesterdayExpense)" />
                    </MudStack>
                    
                    <MudText>Delta - From Now</MudText>

                    <MudStack Row Class="flex-wrap">
                        <MoneyStatistic Title="Money In ⬆️" ValueColor="Color.Success" Amount="@(todayIncome - beginningIncome)" />
                        <MoneyStatistic Title="Money Out ⬇️" ValueColor="Color.Error" Amount="@(todayExpense - beginningExpense)" />
                    </MudStack>

                    <MudText>Account Totals</MudText>

                    var accountTotals = _totalForecastData
                        .Where(x => DateOnly.ParseExact(x.Cycle, "dd/MM/yyyy") == today)
                        .ToList();

                    <MudStack Row Class="flex-wrap">
                        @foreach (var accountTotal in accountTotals)
                        {
                            <MoneyStatistic Title="@accountTotal.AccountName" Amount="@accountTotal.Balance" />
                        }
                    </MudStack>
                }
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="0" Outlined>
            <MudCardHeader>
                Total Income
            </MudCardHeader>
            <MudCardContent>
                <ApexChart TItem="ForecastDto" Options="GetOptions()">
                    @foreach (var incomeName in _incomeForecastData
                        .DistinctBy(x => x.AccountName)
                        .Select(x => x.AccountName))
                    {
                        <ApexPointSeries TItem="ForecastDto"
                                         Items="_incomeForecastData.Where(x => x.AccountName == incomeName)"
                                         Name="@incomeName"
                                         XValue="@GetXValue()"
                                         YValue="x => x.Balance"/>
                    }

                </ApexChart>
            </MudCardContent>
        </MudCard>
        
        <MudCard Elevation="0" Outlined>
            <MudCardHeader>
                Total Expenses
            </MudCardHeader>
            <MudCardContent>
                <ApexChart TItem="ForecastDto" Options="GetOptions()">
                    @foreach (var incomeName in _expensesForecastData
                        .DistinctBy(x => x.AccountName)
                        .Select(x => x.AccountName))
                    {
                        <ApexPointSeries TItem="ForecastDto"
                                         Items="@_expensesForecastData.Where(x => x.AccountName == incomeName)"
                                         Name="@incomeName"
                                         XValue="@GetXValue()"
                                         YValue="x => x.Balance"/>
                    }

                </ApexChart>
            </MudCardContent>
        </MudCard>
        
        <MudCard Elevation="0" Outlined>
            <MudCardHeader>
                Totals
            </MudCardHeader>
            <MudCardContent>
                <ApexChart TItem="ForecastDto" Options="GetOptions()">
                    @foreach (var incomeName in _totalForecastData
                        .DistinctBy(x => x.AccountName)
                        .Select(x => x.AccountName))
                    {
                        <ApexPointSeries TItem="ForecastDto"
                                         Items="@_totalForecastData.Where(x => x.AccountName == incomeName)"
                                         Name="@incomeName"
                                         XValue="@GetXValue()"
                                         YValue="x => x.Balance"/>
                    }

                </ApexChart>
            </MudCardContent>
        </MudCard>

    </MudStack>
}

@code
{
    private bool _loading;

    private IReadOnlyList<ForecastDto>? _incomeForecastData;
    private IReadOnlyList<ForecastDto>? _expensesForecastData;
    private IReadOnlyList<ForecastDto>? _totalForecastData;
    
    private Func<ForecastDto, object> GetXValue() => 
        x => DateTime.ParseExact(x.Cycle, "dd/MM/yyyy", CultureInfo.InvariantCulture)
            .AddDays(1);

    private ApexChartOptions<ForecastDto> GetOptions() => new()
    {
        Chart = new Chart()
        {
            Type = ChartType.Area,
            Height = 350,
            Zoom = new Zoom
            {
                AutoScaleYaxis = true,
            },
            Stacked = true,
            StackType = StackType.Normal,
            Group = "ForecastSynchronization"
        },
        Stroke = new Stroke()
        {
            Curve = Curve.Stepline,
            Width = 2
        },
        Xaxis = new XAxis()
        {
            Type = XAxisType.Datetime,
            TickPlacement = TickPlacement.On,
        },
        Yaxis = new List<YAxis>()
        {
            new YAxis()
            {
                Labels = new YAxisLabels()
                {
                    Formatter = @"
(value) => {
    return window.formatter.format(value);
}"
                }
            }
        }
    };

    private double _days = 365;

    private DateTime? _daySummaryDate;
    
    protected override async Task OnInitializedAsync() => await ReloadAsync();

    private async Task ReloadAsync()
    {
        _loading = true;

        await NormalizedClient.UpdateAsync();

        _incomeForecastData = await ForecastClient.GetIncomeForecastAsync((int)_days);
        _expensesForecastData = await ForecastClient.GetExpenseForecastAsync((int)_days);
        _totalForecastData = await ForecastClient.GetTotalsForecastAsync((int)_days);

        _loading = false;
    }
    private async Task HandleLoadClick()
    {
        await ReloadAsync();
    }
}
