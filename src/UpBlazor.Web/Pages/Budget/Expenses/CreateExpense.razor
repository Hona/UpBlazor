@using UpBlazor.Core.Models.Enums
@using UpBlazor.Web.Pages.Insights
@using UpBlazor.Application.Features.RecurringExpenses
@using UpBlazor.Application.Features.Expenses
@using Marten

@inject IMediator _mediator

<Card Title="New Expense">
    <Form Model="_request" 
          LabelColSpan="4"
          WrapperColSpan="20"
          OnFinish="async () => await OnFormFinishAsync()"
          Loading="_loading">
        <FormItem>
            <Input DebounceMilliseconds="int.MaxValue" @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="Cost">
            <InputGroup>
                <MoneyInput @bind-Amount="@context.Amount"/>
            </InputGroup>
        </FormItem>
        <FormItem Label="Source">
            <InputGroup>
                <ExpenseSourceInput @bind-Value="context.ExpenseSource"
                                    @ref="_expenseSourceInput"/>
            </InputGroup>
        </FormItem>
        @if (_expenseSourceInput?.Value?.IncomeId is not null)
        {
            <FormItem WrapperColOffset="4" WrapperColSpan="20">
                <AntDesign.Text>
                    Because you have selected an expense from an income - this is automatically recurring at the same rate as your income
                </AntDesign.Text>
            </FormItem>
        }
        else
        {
            <FormItem Label="@DateLabel">
                <DatePicker @bind-Value="@context.PaidByDate" DefaultValue="DateTime.Now"/>
            </FormItem>
            
            <FormItem Label="Regular Payments">
                <InputGroup>
                    <AntDesign.Checkbox Style="padding-right: 1rem" @bind-Value="context.RegularPayments" OnChange="OnRegularPaymentEnabledChange"/>
                    @if (context.RegularPayments)
                    {
                        <AntDesign.InputNumber Disabled="!_request.RegularPayments" Style="min-width: 7rem" TValue="int?" @bind-Value="@context.IntervalUnits" Min="1" Step="1" DefaultValue="1"/>
                        <EnumSelect TValue="Interval" Placeholder="Interval" Disabled="!_request.RegularPayments" Style="min-width: 9rem" @bind-Value="context.Interval"/>
                    }
                </InputGroup>
            </FormItem>
        }
        <FormItem WrapperColOffset="4" WrapperColSpan="20">
            @* TODO: Implement expenses with relative cost on a saver *@
            <Button Type="primary" HtmlType="submit" Disabled="@(_request.RegularPayments && (!_request.Interval.HasValue || !_request.IntervalUnits.HasValue)
                                                                 || _request.Amount.Percent.HasValue && _expenseSourceInput?.Value?.SaverId != null)">
                Submit
            </Button>
        </FormItem>
    </Form>
</Card>

@code
{
    [Parameter]
    public EventCallback OnNewExpense { get; set; }
    
    private ExpenseRequest _request = new();

    private bool _loading;

    private string DateLabel => _request.RegularPayments ? "Start Date" : "Due By";

    private ExpenseSourceInput _expenseSourceInput;

    private async Task OnFormFinishAsync()
    {
        _loading = true;

        if (_request.Amount.Percent.HasValue)
        {
            _request.Amount.Percent /= 100;
        }

        if (_request.RegularPayments)
        {
            if (_expenseSourceInput.Value.IncomeId is not null)
            {
                throw new Exception("This path shouldn't be possible");
            }

            await _mediator.Send(new CreateRecurringExpenseCommand(_request.Name, _request.Interval.Value, _request.IntervalUnits.Value, _request.Amount, _request.PaidByDate, _expenseSourceInput.Value.SaverId));
        }
        else
        {
            await _mediator.Send(new CreateExpenseCommand(_request.Name, _request.Amount, _request.PaidByDate, _expenseSourceInput.Value.IncomeId, _expenseSourceInput.Value.SaverId));
        }

        _request = new ExpenseRequest();

        _expenseSourceInput.Reset();

        _loading = false;

        if (OnNewExpense.HasDelegate)
        {
            await OnNewExpense.InvokeAsync();
        }
    }

    private void OnRegularPaymentEnabledChange(bool enabled)
    {
        if (!enabled)
        {
            _request.Interval = null;
            _request.IntervalUnits = null;
        }
        else
        {
            // Change type to saver
            _expenseSourceInput.ChangeType(false);
        }
    }

    private class ExpenseRequest
    {
        private ExpenseSourceInput.ExpenseSource _expenseSource = new();

        [DisplayName("Name"), Required]
        public string Name { get; set; }
        [Required]
        public Money Amount { get; set; } = new();
        
        [Required]
        public DateTime PaidByDate { get; set; }
        
        [DisplayName("Regular Payment")]
        public Interval? Interval { get; set; }
        public int? IntervalUnits { get; set; }
        
        public bool RegularPayments { get; set; }

        public ExpenseSourceInput.ExpenseSource ExpenseSource
        {
            get => _expenseSource;
            set
            {
                _expenseSource = value;
                
                if (value.IncomeId.HasValue)
                {
                    // Automatically regular payments
                    RegularPayments = false;
                    PaidByDate = DateTime.MinValue;
                }
            }
        }
    }
}
