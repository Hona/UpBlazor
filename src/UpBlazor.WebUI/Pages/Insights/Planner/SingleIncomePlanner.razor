@inject UpClient UpClient
@inject PlannerClient PlannerClient
@inject NormalizedClient NormalizedClient

@if (_loading)
{
    <Spin />
}
else if (Income is null)
{

}
else
{
    <Card>
        <Statistic Title="Starting Total" Value="@Income.ExactMoney" Precision="2">
            <PrefixTemplate>
                $
            </PrefixTemplate>
        </Statistic>
    </Card>

    <Divider/>

    <Title Level="4">Income Expenses</Title>
    <Table DataSource="_incomePlanner.IncomeExpenseSubTotals" Context="tableContext">
        <Column Title="Name" @bind-Field="@tableContext.Name" Sortable/>
        <Column Title="Amount (%)" TData="decimal?" DataIndex="Amount.Percent" Format="0%" Sortable>
            @if (tableContext.Amount.Percent.HasValue)
            {
                var exactAmount = Income.ExactMoney * tableContext.Amount.Percent.Value;

                <span>
                    @tableContext.Amount.Percent.Value ($@exactAmount.ToString("F2"))
                </span>
            }
        </Column>
        <Column Title="Amount ($)" TData="decimal?" DataIndex="Amount.Exact" Sortable>
            @if (tableContext.Amount.Exact.HasValue)
            {
                <span>
                    $@tableContext.Amount.Exact.Value.ToString("F2")
                </span>
            }
        </Column>
        <SaverIdColumn Title="Saver" SaverId="@tableContext.SaverId" Accounts="_accounts"/>
        <Column Title="Remaining Balance" Format="$0.00" @bind-Field="@tableContext.RunningTotal"/>
    </Table>

    <Title Level="4">Recurring Expenses (Pro Rata)</Title>
    <Table DataSource="_incomePlanner.ProRataExpenseSubTotals" Context="tableContext">
        <Column Title="Name" @bind-Field="@tableContext.Name" Sortable/>
        <Column Title="Amount (%)" TData="decimal?" DataIndex="Amount.Percent" Format="0%" Sortable>
            @if (tableContext.Amount.Percent.HasValue)
            {
                var exactAmount = Income.ExactMoney * tableContext.Amount.Percent.Value;

                <span>
                    @tableContext.Amount.Percent.Value ($@exactAmount.ToString("F2"))
                </span>
            }
        </Column>
        <Column Title="Amount ($)" TData="decimal?" DataIndex="Amount.Exact" Sortable>
            @if (tableContext.Amount.Exact.HasValue)
            {
                <span>
                    $@tableContext.Amount.Exact.Value.ToString("F2")
                </span>
            }
        </Column>
        <SaverIdColumn Title="Saver" SaverId="@tableContext.SaverId" Accounts="_accounts"/>
        <Column Title="Remaining Balance" Format="$0.00" @bind-Field="@tableContext.RunningTotal"/>
    </Table>

    <Title Level="4">Exact Savings Plan</Title>
    <Table DataSource="_incomePlanner.ExactSavingsPlanSubTotals" Context="tableContext">
        <Column Title="Name" @bind-Field="@tableContext.Name" Sortable/>
        <Column Title="Amount" TData="decimal?" DataIndex="Amount.Exact" Format="$0.00" Sortable/>
        <SaverIdColumn Title="Saver" SaverId="@tableContext.SaverId" Accounts="_accounts"/>
        <Column Title="Remaining Balance" Format="$0.00" @bind-Field="@tableContext.RunningTotal"/>
    </Table>

    <Title Level="4">Relative Savings Plan</Title>
    <Table DataSource="_incomePlanner.PercentSavingsPlanSubTotals" Context="tableContext">
        <Column Title="Name" @bind-Field="@tableContext.Name" Sortable/>
        <Column Title="Amount (%)" TData="decimal?" DataIndex="Amount.Percent" Format="0%" Sortable/>
        <Column Title="Amount ($)" TData="decimal?" DataIndex="Amount.Percent" Sortable>
            @{
                var exactAmount = Income.ExactMoney * tableContext.Amount.Percent.Value;
            }
            $@exactAmount.ToString("F2")
        </Column>
        <SaverIdColumn Title="Saver" SaverId="@tableContext.SaverId" Accounts="_accounts"/>
        <Column Title="Remaining Balance" Format="$0.00" @bind-Field="@tableContext.RunningTotal"/>
    </Table>

    <Divider/>

    <Card>
        <Statistic Title="Unbudgeted Money" Value="@_incomePlanner.UnbudgetedMoney">
            <PrefixTemplate>
                $
            </PrefixTemplate>
        </Statistic>

        <Divider/>

        <Space Size=@(("8", "8")) Direction="DirectionVHType.Horizontal" Wrap>
            @foreach (var (account, totalAmount) in _incomePlanner.FinalBudget)
            {
                <SpaceItem>
                    <Card Style="min-width: 300px" Title="@_accounts.First(x => x.Id == account).Attributes.DisplayName">
                        <Progress Percent="@((double) (totalAmount / Income.ExactMoney * 100))" Format='x => x.ToString("F1") + "%"' Status="@ProgressStatus.Normal"/>
                        <span>
                            $@totalAmount.ToString("F2")
                        </span>
                    </Card>
                </SpaceItem>
            }
        </Space>
    </Card>
}

@code
{
    [Parameter]
    public Income Income { get; set; }

    private Guid _cachedIncomeId;

    private IReadOnlyList<AccountResource> _accounts;

    private IncomePlannerDto _incomePlanner;
    private bool _loading;

    protected override async Task OnParametersSetAsync()
    {
        if (Income is null || _cachedIncomeId == Income.Id)
        {
            return;
        }

        _loading = true;

        await NormalizedClient.UpdateAsync();
        _incomePlanner = await PlannerClient.GetIncomePlannerAsync(Income.Id, false);
        _accounts = await UpClient.GetAccountsAsync();
        
        _cachedIncomeId = Income.Id;

        _loading = false;
    }
}