@using Up.NET.Models

@inject UpClient _upClient

@inject NavigationManager NavigationManager

<div style="display: flex; justify-content: center; align-items: center; width: 100%">
    @if (_loading)
    {
        <Spin />
    }
    else
    {
        <AuthorizeView>
            <Authorized>
                @if (_response is null)
                {
                    <span>❌</span>
                }
                else
                {
                    <span>@_response.Meta.StatusEmoji</span>
                }
            </Authorized>
            <NotAuthorized />
        </AuthorizeView>
    }
    
</div>

@code
{
    private bool _loading;
    private PingResponse? _response;
    
    private string _previousUrl = "/";

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;

        await RefreshAsync();
    }

    private async Task RefreshAsync(bool triggerStateChanges = false)
    {
        _loading = true;

        if (triggerStateChanges)
        {
            StateHasChanged();
        }

        try
        {
            _response = await _upClient.PingAsync(false);
        }
        catch
        {
            _response = null;
        }
        
        _loading = false;

        if (triggerStateChanges)
        {
            StateHasChanged();
        }
    }
    
    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (_previousUrl.Contains("settings", StringComparison.OrdinalIgnoreCase))
        {
            RefreshAsync(true);
        }

        _previousUrl = e.Location;
    }
}
