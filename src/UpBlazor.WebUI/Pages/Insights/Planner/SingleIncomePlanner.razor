@using MudBlazor

@inject UpClient UpClient
@inject PlannerClient PlannerClient
@inject NormalizedClient NormalizedClient

@if (_loading)
{
    <MudProgressCircular Indeterminate />
}
else if (Income is null)
{

}
else
{
    <MudStack>
        <MoneyStatistic Title="Starting Total"
                        Amount="@Income.ExactMoney" />

        <SavingsPlanDataGrid Items="@_incomePlanner.IncomeExpenseSubTotals"
                         Accounts="_accounts"
                         Income="Income"
                         Title="Income Expenses" 
                         SaverColumnTitle="From" />
    
        <SavingsPlanDataGrid Items="@_incomePlanner.ProRataExpenseSubTotals"
                             Accounts="_accounts"
                             Income="Income"
                             Title="Recurring Expenses (Pro Rata)" 
                             SaverColumnTitle="From" />
        
        <SavingsPlanDataGrid Items="_incomePlanner.ExactSavingsPlanSubTotals"
                             Accounts="_accounts" 
                             Title="Exact Savings Plans"
                             SaverColumnTitle="To"/>
        
        <SavingsPlanDataGrid Items="_incomePlanner.PercentSavingsPlanSubTotals"
                             Accounts="_accounts" 
                             Title="Relative Savings Plans"
                             SaverColumnTitle="To" />
        
        <MudDivider Class="my-4" />
        
        <MoneyStatistic Title="Unbudgeted Money" Amount="_incomePlanner.UnbudgetedMoney"
                        Elevation="0" Outlined="false"
                        TitleTypo="Typo.h5"/>
        
        <MudText Typo="Typo.h5" Class="mt-4">
            Final Totals
        </MudText>
        
        <MudStack Class="mt-4 flex-wrap" Row AlignItems="AlignItems.Center">
            @foreach (var (account, totalAmount) in _incomePlanner.FinalBudget)
            {
                <MoneyStatistic Title="@_accounts.First(x => x.Id == account).Attributes.DisplayName"
                                Amount="totalAmount"
                                MaximumAmount="Income.ExactMoney"/>

            }
        </MudStack>
        
    </MudStack>
    @*

    <Card>

        <Space Size=@(("8", "8")) Direction="DirectionVHType.Horizontal" Wrap>
            @foreach (var (account, totalAmount) in _incomePlanner.FinalBudget)
            {
                <SpaceItem>
                    <Card Style="min-width: 300px" Title="@_accounts.First(x => x.Id == account).Attributes.DisplayName">
                        <Progress Percent="@((double) (totalAmount / Income.ExactMoney * 100))" Format='x => x.ToString("F1") + "%"' Status="@ProgressStatus.Normal"/>
                        <span>
                            $@totalAmount.ToString("F2")
                        </span>
                    </Card>
                </SpaceItem>
            }
        </Space>
    </Card>*@
}

@code
{
    [Parameter]
    public Income? Income { get; set; }

    private Guid _cachedIncomeId;

    private IReadOnlyList<AccountResource> _accounts;

    private IncomePlannerDto _incomePlanner;
    private bool _loading;

    protected override async Task OnParametersSetAsync()
    {
        if (Income is null || _cachedIncomeId == Income.Id)
        {
            return;
        }

        _loading = true;

        await NormalizedClient.UpdateAsync();
        _incomePlanner = await PlannerClient.GetIncomePlannerAsync(Income.Id, false);
        _accounts = await UpClient.GetAccountsAsync();
        
        _cachedIncomeId = Income.Id;

        _loading = false;
    }
}