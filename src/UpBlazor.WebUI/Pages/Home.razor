@page "/home"

@using MudBlazor
@using Color = MudBlazor.Color

@inject NavigationManager _navigationManager
@inject UpClient _upClient

@if (_loading)
{
    <MudProgressLinear Indeterminate />
}
else
{
    <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center" Class="flex-wrap pt-4">
        @foreach (var transactionAccount in _accounts)
        {
            <a href='@($"/insights/transactions/{transactionAccount.Id}")'>
                <MudCard Elevation="2" Outlined Style="width:300px;">
                    <MudCardHeader>
                        <MudText Typo="Typo.subtitle2">
                            @transactionAccount.Attributes.DisplayName
                        </MudText>
                        <MudSpacer />
                        <MudChip Color="@(transactionAccount.Attributes.AccountType == AccountType.Transactional ? Color.Primary : Color.Secondary)">
                            @transactionAccount.Attributes.AccountType
                        </MudChip>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudAlert Severity="Severity.Normal" NoIcon>
                            <MudStack Row>
                                <MudText Typo="Typo.h5">$</MudText>
                                <MudText Typo="Typo.h5">
                                    @decimal.Parse(transactionAccount.Attributes.Balance.Value).ToString("F2")
                                </MudText>
                            </MudStack>
                        </MudAlert>
                    </MudCardContent>
                </MudCard>
            </a>
        }
    </MudStack>
}

@code
{
    private bool _loading;
    private IReadOnlyList<AccountResource> _accounts;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    private async Task ReloadAsync()
    {
        _loading = true;
        
        _accounts = await _upClient.GetAccountsAsync();
        
        _loading = false;
    }
}
