@page "/admin/notifications"
@using Color = MudBlazor.Color

@layout AdminAuthorizeLayout

@inject NotificationsClient NotificationsClient

<MudText Typo="Typo.h3" Class="my-4">
    Notifications
</MudText>

@if (_loading)
{
    <MudProgressLinear Indeterminate />
}
else
{
    ArgumentNullException.ThrowIfNull(_allNotifications);
    <MoneyStatistic Amount="@_allNotifications.Count" AmountFormatter="G"
               Title="Total Notifications" HideDollarSymbol />
    
    <MudCard Class="mt-4">
        <MudCardContent>
            <CreateNotificationButton OnNotificationCreated="HandleNotificationCreatedAsync"/>
        </MudCardContent>
    </MudCard>
    
    <MudDataGrid Class="mt-4" Items="_allNotifications">
        <Columns>
            <Column T="Notification" Field="@nameof(Notification.Title)" />
            <Column T="Notification" Field="@nameof(Notification.Description)" />
            <Column T="Notification" Field="@nameof(Notification.Author)" />
            <Column T="Notification" Field="@nameof(Notification.CreatedAt)" />
            <Column T="Notification">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton OnClick="async () => await ShowReadByModal(context.Item)">
                            Read Receipts
                        </MudButton>
                        <MudButton Color="Color.Error"
                                   OnClick="async () => await HandleNotificationDeletedAsync(context.Item)">
                            Delete
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </Column>
        </Columns>
    </MudDataGrid>
}

<MudDialog @bind-IsVisible="_modalVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Receipt" Class="mr-3"/> Read Receipts
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_modalLoading || _selectedNotificationUsersWhoRead is null)
        {
            <MudProgressCircular Indeterminate />
        }
        else
        {
            <MudStack Row Class="flex-wrap">
                @foreach (var user in _selectedNotificationUsersWhoRead)
                {
                    <MudChip>
                        @(user.GivenName) (@(user.Email))
                    </MudChip>
                }
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnModalClose" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    private bool _loading;
    private IReadOnlyList<Notification>? _allNotifications;

    private bool _modalVisible;
    private bool _modalLoading = true;
    private Notification? _selectedNotification;
    private IReadOnlyList<RegisteredUser>? _selectedNotificationUsersWhoRead;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    private async Task ReloadAsync()
    {
        _loading = true;

        _allNotifications = await NotificationsClient.GetAllNotificationsAdminAsync();

        _loading = false;
    }

    private async Task HandleNotificationCreatedAsync() => await ReloadAsync();

    private async Task HandleNotificationDeletedAsync(Notification notification)
    {
        await NotificationsClient.DeleteNotificationAsync(notification.Id);

        await ReloadAsync();
    }

    private async Task ShowReadByModal(Notification notification)
    {
        _selectedNotification = notification;
        _modalVisible = true;
        
        _modalLoading = true;

        _selectedNotificationUsersWhoRead = await NotificationsClient.GetAllWhoReadNotificationAsync(_selectedNotification.Id);
        
        _modalLoading = false;
    }

    private void OnModalClose()
    {
        _modalVisible = false;
        _selectedNotification = null;
        _selectedNotificationUsersWhoRead = null;
    }
}
