@using UpBlazor.Core.Models.Enums
@using System.Text.RegularExpressions
@using UpBlazor.Application.Features.Incomes

@inject IMediator _mediator

<Card Title="New Income">
    <Form Model="_request" 
          LabelColSpan="4"
          WrapperColSpan="20"
          OnFinish="async () => await OnFormFinishAsync()"
          Loading="_loading">
        <FormItem Label="Name">
            <Input DebounceMilliseconds="int.MaxValue" @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="Amount">
            <AntDesign.InputNumber Style="min-width: 9rem" Formatter="MoneyFormat" Parser="MoneyParse" @bind-Value="@context.ExactMoney" DefaultValue="50M" Min="0" Step="0.01M"/>
        </FormItem>
        <FormItem Label="Start Date">
            <DatePicker @bind-Value="@context.StartDate" DefaultValue="DateTime.Now"/>
        </FormItem>
        <FormItem Label="Cycle">
            <InputGroup>
                <AntDesign.InputNumber Style="min-width: 7rem" @bind-Value="@context.IntervalUnits" Min="1" Step="1" DefaultValue="1"/>
                <EnumSelect TValue="Interval" Placeholder="Interval" Style="min-width: 9rem" @bind-Value="@context.Interval"/>
            </InputGroup>
        </FormItem>
        <FormItem WrapperColOffset="4" WrapperColSpan="20">
            <Button Type="primary" HtmlType="submit" >
                Submit
            </Button>
        </FormItem>
    </Form>
</Card>

@code
{
    [Parameter]
    public EventCallback OnNewIncome { get; set; }
    
    private IncomeRequest _request = new();

    private bool _loading;
    
    private async Task OnFormFinishAsync()
    {
        _loading = true;

        await _mediator.Send(new CreateIncomeCommand(_request.Name, _request.StartDate, _request.ExactMoney, _request.Interval, _request.IntervalUnits));
        
        _request = new();
        _loading = false;

        if (OnNewIncome.HasDelegate)
        {
            await OnNewIncome.InvokeAsync();
        }
    }

    private string MoneyFormat(decimal value) => $"${value:N2}";

    private string MoneyParse(string value) => Regex.Replace(value, @"\$\s?|(,*)", "");


    private class IncomeRequest
    {
        [Required]
        public string Name { get; set; }
        [Required]
        public DateTime StartDate { get; set; }
        [Required]
        public decimal ExactMoney { get; set; }
        [Required]
        public Interval Interval { get; set; }
        [Required]
        public int IntervalUnits { get; set; }
    }
}
